<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Troisi | technology, software development and productivity</title>
    <link>https://www.marcotroisi.com/categories/javascript/index.xml</link>
    <description>Recent content on Marco Troisi | technology, software development and productivity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Marco Troisi</copyright>
    <atom:link href="https://www.marcotroisi.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Composition over Inheritance (what it is, why use it)</title>
      <link>https://www.marcotroisi.com/composition-over-inheritance/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/composition-over-inheritance/</guid>
      <description>&lt;p&gt;In today&amp;#8217;s article, I would like to talk about something which I see that, sometimes, developers aren&amp;#8217;tÂ too familiar with. Most of us know what the traditional concept of &lt;strong&gt;inheritance&lt;/strong&gt; is: a child class extends a parent class. And, obviously, multiple children classes can extend the same parent class.&lt;/p&gt;

&lt;p&gt;What some developers don&amp;#8217;t seem to be always aware of (or, perhaps, they just aren&amp;#8217;t entirely sure how to use it), is the idea of &lt;strong&gt;composition&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-composition&#34;&gt;What is Composition&lt;/h2&gt;

&lt;p&gt;Composition can be explained by a child class &amp;#8220;incorporating&amp;#8221; one or more classes that it intends to extend. In other words, you are declaring inside your class, what other class&amp;#8217; methods do you want to be able to use, without having to strongly tie up your children class to its parent(s).&lt;/p&gt;

&lt;h3 id=&#34;has-a-vs-is-a&#34;&gt;&lt;em&gt;Has-a&lt;/em&gt; VS &lt;em&gt;Is-a&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;A good way to look at Composition is to think of a class that &lt;em&gt;HAS-A&lt;/em&gt; relationship with another class, rather &lt;em&gt;IS-A&lt;/em&gt; &amp;#8220;son&amp;#8221; of that class. In this sense, when you use Composition, the class has an &amp;#8220;identity&amp;#8221; of its own, and it&amp;#8217;s not to be seen as being &amp;#8220;only&amp;#8221; a son of that other class which it extends.&lt;/p&gt;

&lt;h2 id=&#34;the-benefits-of-composition&#34;&gt;The Benefits of Composition&lt;/h2&gt;

&lt;p&gt;While I am not advocating for the complete elimination of traditional inheritance, there are benefits of using Composition that I would like to highlight. And, the way I see it, it is possible that once we realise the power of Composition over Inheritance, we may actually end up using Inheritance less and less. Here are the reasons why Composition is a good pattern:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: it is not by chance that I am giving this one the first position in my list. With Inheritance, as mentioned, you tie your Class up to another one, and you define even before starting to design your class, who is going to extend (be a child of) what. But, what happens if you wanted to only use &lt;em&gt;some&lt;/em&gt; of the methods that your parent has? Or, on the opposite side, what if you had 5 children of which only 2 needed a couple of additional methods? These things would not have been a problem with Composition. But the truth is that &lt;strong&gt;Inheritance is often not flexible enough&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extension of Multiple Classes&lt;/strong&gt;: who says you should only extend one Class? Why couldn&amp;#8217;t &lt;code&gt;Corolla&lt;/code&gt; be a son of &lt;code&gt;Car&lt;/code&gt; but also of &lt;code&gt;Toyota&lt;/code&gt; at the same time? That obviously makes sense, but it&amp;#8217;s normally not possible in traditional programming languages. &lt;a href=&#34;http://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces_in_object-oriented_languages&#34;&gt;Interfaces&lt;/a&gt; can give us some help here, but they &lt;em&gt;don&amp;#8217;t&lt;/em&gt; actually implement the methods we need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid duplicates&lt;/strong&gt;: Like in the previous example, if we were to use Interfaces for our &lt;code&gt;Corolla&lt;/code&gt; Class, we would end up having to write some of our methods for our &lt;code&gt;Yaris&lt;/code&gt; or &lt;code&gt;Sedan&lt;/code&gt; Classes. That&amp;#8217;s not cool. Duplicating code is not a good idea.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are other benefits to using Composition, but those are the ones I feel are the most worthy of being highlighted here.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-use-composition-in-insert-programming-language-here&#34;&gt;How do I use Composition in &lt;em&gt;[insert programming language here]&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Composition is available out of the box in &lt;a href=&#34;http://en.wikipedia.org/wiki/Trait_(computer_programming)#Supported_languages&#34;&gt;many of the mainstream languages&lt;/a&gt;. It can be implemented in the form of a &lt;em&gt;Trait&lt;/em&gt; in PHP, Python, Scala and others; It&amp;#8217;s called a &lt;em&gt;Module&lt;/em&gt; in Ruby, and a &lt;em&gt;Role&lt;/em&gt; in Perl. Javascript, as per usual, has &lt;a href=&#34;http://rjzaworski.com/2013/03/composition-in-javascript&#34;&gt;unique ways to implement Composition&lt;/a&gt;, but it&amp;#8217;s there. Finally, it&amp;#8217;s interesting to note that Go doesn&amp;#8217;t even consider Inheritance as an option; Composition is the only game in town, and it&amp;#8217;s called &lt;a href=&#34;http://golang.org/doc/effective_go.html#embedding&#34;&gt;Embedding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: what are your thoughts on Composition over Inheritance? Where is it best to use one over the other? Share your ideas on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=https://www.marcotroisi.com/composition-over-inheritance/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=https://www.marcotroisi.com/composition-over-inheritance/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=goo.gl/AU3t8k&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;more-to-read-on-composition-over-inheritance&#34;&gt;More to read on Composition over Inheritance&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.clean-code-developer.com/Favor-Composition-over-Inheritance.ashx&#34;&gt;Clean Code Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Composition_over_inheritance&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codingdelight.com/2014/01/16/favor-composition-over-inheritance-part-1/&#34;&gt;Coding Delight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>WordPress and Ghost: a CMS vs a blogging platform</title>
      <link>https://www.marcotroisi.com/wordpress-and-ghost/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/wordpress-and-ghost/</guid>
      <description>&lt;p&gt;I am definitely amongst the growing group of developers that are fascinated and thrilled by &lt;a href=&#34;http://www.nodejs.org&#34;&gt;node.js&lt;/a&gt;, its thriving community, its being simple yet powerful, super-fast and scalable.&lt;/p&gt;

&lt;p&gt;Although my main language remains &lt;a href=&#34;http://www.php.net&#34;&gt;PHP&lt;/a&gt; (mostly because my employer wants me to work with it, but also because of its enormous libraries collection and its maturity as a language for the web), I can undoubtedly see a future with most of the cool apps out there being developed with node.js. I am convinced that, should I start a new project of my own today, a project that I believed would conquer the market, I would totally go for a lightweight HTML5 + CSS3 + JS (with the help of &lt;a href=&#34;http://www.angularjs.org&#34;&gt;Angular.js&lt;/a&gt;) interface backed by a powerful node.js (with &lt;a href=&#34;http://www.expressjs.com&#34;&gt;express.js&lt;/a&gt;)-based API.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So when I came to know about this new, elegant and lightweight blogging platform named &lt;a href=&#34;http://www.ghost.org&#34;&gt;Ghost&lt;/a&gt; and based on node.js I was more than happy and I thought it was just what we needed to be &lt;em&gt;finally&lt;/em&gt; set free from WordPress! But I then worked out that I was almost surely wrong.&lt;/p&gt;

&lt;h2 id=&#34;wordpress-is-a-cms-not-a-blogging-platform&#34;&gt;WordPress is a CMS, not a blogging platform&lt;/h2&gt;

&lt;p&gt;While it still remains the best blogging platform out there, as of today &lt;a href=&#34;http://www.wordpress.org&#34;&gt;WordPress&lt;/a&gt; is a fully fledged CMS and, in my opinion, it&amp;#8217;s the best CMS you might desire. It&amp;#8217;s simple enough to use and it&amp;#8217;s got so many &lt;a href=&#34;http://wordpress.org/plugins/&#34;&gt;plugins and extensions&lt;/a&gt; that to call it an ecosystem wouldn&amp;#8217;t mean overrating it. And, to be fair, the fact that it&amp;#8217;s based on PHP means that it can run virtually everywhere with the minimum effort required.&lt;/p&gt;

&lt;h2 id=&#34;ghost-is-what-it-claims-to-be-just-a-blogging-platform&#34;&gt;Ghost is what it claims to be: &lt;em&gt;just a blogging platform&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Ghost is beautiful, easy to use and it&amp;#8217;s got everything in the right place. The dashboard is right the one that you would love to have in your WordPress blog. And it&amp;#8217;s seriously fast, and you would expect that since it&amp;#8217;s built on node.js. But it&amp;#8217;s limited to blogging and they (&lt;a href=&#34;https://ghost.org/about/&#34;&gt;the developers&lt;/a&gt;) want it to be so. That&amp;#8217;s great indeed, but it means that you have to be sure that your blog will always be just a blog, nothing more. And you&amp;#8217;ve got to know that, apart from the pleasure of a great platform for writing, you&amp;#8217;re not going to have a lot more in terms of functionalities and extensions. Of course they&amp;#8217;ll come in the future, but we can easily say that in the foreseeable future they won&amp;#8217;t be as many as WordPress.&lt;/p&gt;

&lt;h2 id=&#34;conclusion-verdict&#34;&gt;Conclusion/Verdict&lt;/h2&gt;

&lt;p&gt;They&amp;#8217;re both great platforms, WordPress being a lot more mature, Ghost being still in its infancy. Just don&amp;#8217;t think of them as one replacing the other. They do different things, and they both work. Decide &lt;em&gt;what your website is gonna be about&lt;/em&gt; and then pick the right platform for you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Native apps are faster than web apps. Ok, whatâs the news?</title>
      <link>https://www.marcotroisi.com/native-apps-vs-web-apps/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/native-apps-vs-web-apps/</guid>
      <description>&lt;p&gt;I honestly don&amp;#8217;t understand what&amp;#8217;s the point of &lt;a href=&#34;http://sealedabstract.com/rants/mobile-web-apps-are-slow/&#34; target=&#34;_blank&#34;&gt;a post&lt;/a&gt; trying to convince people that &lt;em&gt;web apps are slower than native apps&lt;/em&gt;. I don&amp;#8217;t understand it, and I think I have good reasons for that.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1 Who did ever say that web apps are faster than native ones?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simply enough: no one. I don&amp;#8217;t think it&amp;#8217;s ever been a goal of any of the so-called &amp;#8220;web advocates&amp;#8221; (from Paul Irish to the Mozilla foundation) to demonstrate that web apps are faster than native apps. The real purpose always has been to demonstrate that web apps are &amp;#8211; in many cases &amp;#8211; better, not necessarily faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2 Who cares about a few tens of milliseconds?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Have you seriously ever even noticed any difference in terms of time between your Gmail web app and any native mail client (e.g. Thunderbird)? In other words, do you perceive the Gmail website to be so much slower than any native client to load and show you your emails? I don&amp;#8217;t think so. There must be a reason for why so many people have switched from a native approach to a web based one when talking about reading their emails.&lt;/p&gt;

&lt;p&gt;And that reason is, inevitably, because people perceive such well built web apps as much faster and efficient than native applications, which sometimes take longer to open, and are not necessarily faster when loading external data (and that actually represents the vast majority of modern apps, which are constantly requesting and sending data from/to an online server).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3 The real matter is what do you use them for&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While things like Google Documents and the Pixlr Editor are some very good examples of web apps trying to replace traditionally native-only apps like Office/LibreOffice and Photoshop/The Gimp, we all understand that the real point is the usage that you want to have of your app.&lt;/p&gt;

&lt;p&gt;For apps like LibreOffice or Photoshop, I would obviously warmly suggest to keep on with the native approach, although a more cloud-oriented approach will definitely be appreciated. But the number of reasons to build a web app as opposed to a native one is way higher, and I cannot imagine a sustainable way &amp;#8211; especially for a small/medium company &amp;#8211; to have native apps for all the platforms currently on the market, plus those ones coming in the near future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, native apps may be faster in some cases. But, that&amp;#8217;s not always the case. And, even when it is, it&amp;#8217;s almost always a matter of millisecond. Servers are everyday bigger and faster, the hardware of the PCs, tablets and smartphones that we buy is being constantly improved by their producers, and browsers like Chrome, Safari, Firefox, and now even Internet Explorer are doing incredibly well in building powerful Javascript engines &amp;#8211; see V8, Nitro, SpiderMonkey &amp;#8211; to make the web faster and faster.&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s more, there are enormous advantages when using the web platform to build apps. Cross-usability, cheaper and faster development, not being limited by some crazy App Store rules are only the main ones. And that&amp;#8217;s why I will keep on believing that the future is in the web. And the more the OS/browser producers will help and adopt the open web standard, the better will be for everyone, be them developers, companies or end users.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

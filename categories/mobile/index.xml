<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Troisi | technology, software development and productivity</title>
    <link>https://www.marcotroisi.com/categories/mobile/index.xml</link>
    <description>Recent content on Marco Troisi | technology, software development and productivity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Marco Troisi</copyright>
    <atom:link href="https://www.marcotroisi.com/categories/mobile/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Native apps are faster than web apps. Ok, whatâ€™s the news?</title>
      <link>https://www.marcotroisi.com/native-apps-vs-web-apps/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/native-apps-vs-web-apps/</guid>
      <description>&lt;p&gt;I honestly don&amp;#8217;t understand what&amp;#8217;s the point of &lt;a href=&#34;http://sealedabstract.com/rants/mobile-web-apps-are-slow/&#34; target=&#34;_blank&#34;&gt;a post&lt;/a&gt; trying to convince people that &lt;em&gt;web apps are slower than native apps&lt;/em&gt;. I don&amp;#8217;t understand it, and I think I have good reasons for that.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1 Who did ever say that web apps are faster than native ones?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simply enough: no one. I don&amp;#8217;t think it&amp;#8217;s ever been a goal of any of the so-called &amp;#8220;web advocates&amp;#8221; (from Paul Irish to the Mozilla foundation) to demonstrate that web apps are faster than native apps. The real purpose always has been to demonstrate that web apps are &amp;#8211; in many cases &amp;#8211; better, not necessarily faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2 Who cares about a few tens of milliseconds?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Have you seriously ever even noticed any difference in terms of time between your Gmail web app and any native mail client (e.g. Thunderbird)? In other words, do you perceive the Gmail website to be so much slower than any native client to load and show you your emails? I don&amp;#8217;t think so. There must be a reason for why so many people have switched from a native approach to a web based one when talking about reading their emails.&lt;/p&gt;

&lt;p&gt;And that reason is, inevitably, because people perceive such well built web apps as much faster and efficient than native applications, which sometimes take longer to open, and are not necessarily faster when loading external data (and that actually represents the vast majority of modern apps, which are constantly requesting and sending data from/to an online server).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3 The real matter is what do you use them for&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While things like Google Documents and the Pixlr Editor are some very good examples of web apps trying to replace traditionally native-only apps like Office/LibreOffice and Photoshop/The Gimp, we all understand that the real point is the usage that you want to have of your app.&lt;/p&gt;

&lt;p&gt;For apps like LibreOffice or Photoshop, I would obviously warmly suggest to keep on with the native approach, although a more cloud-oriented approach will definitely be appreciated. But the number of reasons to build a web app as opposed to a native one is way higher, and I cannot imagine a sustainable way &amp;#8211; especially for a small/medium company &amp;#8211; to have native apps for all the platforms currently on the market, plus those ones coming in the near future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, native apps may be faster in some cases. But, that&amp;#8217;s not always the case. And, even when it is, it&amp;#8217;s almost always a matter of millisecond. Servers are everyday bigger and faster, the hardware of the PCs, tablets and smartphones that we buy is being constantly improved by their producers, and browsers like Chrome, Safari, Firefox, and now even Internet Explorer are doing incredibly well in building powerful Javascript engines &amp;#8211; see V8, Nitro, SpiderMonkey &amp;#8211; to make the web faster and faster.&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s more, there are enormous advantages when using the web platform to build apps. Cross-usability, cheaper and faster development, not being limited by some crazy App Store rules are only the main ones. And that&amp;#8217;s why I will keep on believing that the future is in the web. And the more the OS/browser producers will help and adopt the open web standard, the better will be for everyone, be them developers, companies or end users.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Make your website available offline with HTML5</title>
      <link>https://www.marcotroisi.com/make-your-website-available-offline-with-html5/</link>
      <pubDate>Fri, 12 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/make-your-website-available-offline-with-html5/</guid>
      <description>&lt;p&gt;One of the really cool things &lt;strong&gt;HTML5&lt;/strong&gt; allows to do is to make our web apps available even when our visitors are not connected to any network (assuming, obviously, that they have visited the website before, under network coverage).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;While it is to be said that this feature (called &lt;strong&gt;&lt;em&gt;AppCache&lt;/em&gt;&lt;/strong&gt;) might not be useful/appropriate for many websites, it still remains a great feature that is going to positively affect the web in the next years, offering a much better user experience and giving a new reason to developers and companies for developing just one great HTML5 web app instead of &lt;em&gt;a lot&lt;/em&gt; of native applications.&lt;/p&gt;

&lt;p&gt;The use of the application cache feature can give some benefits to your web app, such as:&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;strong&gt;Offline browsing&lt;/strong&gt;: clearly, that is the main advantage&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;strong&gt;Speed&lt;/strong&gt;: Resources are downloaded and therefore faster to load when a user visit your website&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;strong&gt;Less charge to the server&lt;/strong&gt;: as it only have to download resources that have been changed&lt;/p&gt;

&lt;h2 id=&#34;let-8217-s-make-your-website-available-offline&#34;&gt;Let&amp;#8217;s make your website available offline&lt;/h2&gt;

&lt;p&gt;The first thing you have to do is to &lt;strong&gt;create a manifest&lt;/strong&gt; that will list all the resources you want the local device to download. This manifest must be declared in your &lt;html&gt; element as an attribute.&lt;/p&gt;

&lt;pre&gt;&amp;lt;html manifest=&#34;nameofthemanifest.appcache&#34;&amp;gt;
...
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;.appcache&lt;/em&gt; extension is actually not mandatory, but it&amp;#8217;s the W3C standard, so you better adopt it in order to avoid incompatibilities with strict standard-observing browsers. The manifest attribute in a web application can specify either the relative path of a cache manifest file or an absolute URL (but they must be from the same origin as the application).&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s important to know that this manifest must be &lt;span style=&#34;text-decoration: underline;&#34;&gt;included in each and every page that you want to be cached&lt;/span&gt;, and you don&amp;#8217;t have to list those pages in the manifest, because they will be automatically saved as the user visit them.&lt;/p&gt;

&lt;p&gt;The cache manifest file must be served with the MIME type text/cache-manifest. In Apache, you can do that adding the following line to your .htaccess file:&lt;/p&gt;

&lt;pre&gt;AddType text/cache-manifest .appcache&lt;/pre&gt;

&lt;h2 id=&#34;the-appcache-manifest-file&#34;&gt;The Appcache manifest file&lt;/h2&gt;

&lt;p&gt;The Appcache manifest file is a simple text file that lists the resources (identified by URI) that you want the browser to cache for offline access. The following is an example of a manifest file:&lt;/p&gt;

&lt;pre&gt;CACHE MANIFEST
# mywebapp.appcache v1
# this is my cache manifest 
fileindex.html
cache.html
style.css
image1.png

# Use from network if available
NETWORK:
network.html

# Fallback content
FALLBACK:
/ fallback.html&lt;/pre&gt;

&lt;p&gt;It&amp;#8217;s vital for the cache manifest to be identified as such to have &lt;strong&gt;CACHE MANIFEST&lt;/strong&gt; as its first line. All the resources listed after that line are going to be cached.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;NETWORK&lt;/strong&gt; section lists all the resources for which a network coverage is required, and you don&amp;#8217;t want the browser to save them and use the cached version.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;FALLBACK&lt;/strong&gt; section we&amp;#8217;re going to list the pages that should be showed when a certain resource is not available. In our case, we decided to show &amp;#8220;&lt;em&gt;fallback.html&lt;/em&gt;&amp;#8221; for every resource not available (&amp;#8220;&lt;em&gt;/&lt;/em&gt;&amp;#8220;).&lt;/p&gt;

&lt;p&gt;You can also add a further section &lt;strong&gt;CACHE&lt;/strong&gt;, which will work just as the lines after CACHE MANIFEST. All the three sections CACHE, NETWORK and FALLBACK are optional and can be declared more than once in the manifest file.&lt;/p&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing!&lt;/h2&gt;

&lt;p&gt;If you think that this is going to work at the first attempt you&amp;#8217;re probably crazy. The smallest error in the appcache manifest file will actually prevent your application to be locally cached on a device. In such situations, tools like &lt;strong&gt;Manifesto&lt;/strong&gt; (&lt;a title=&#34;Manifesto&#34; href=&#34;http://manifesto.ericdelabar.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://manifesto.ericdelabar.com/&#34;&gt;http://manifesto.ericdelabar.com/&lt;/a&gt;&lt;/a&gt;) are simply priceless and save you a lot of time and headaches.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Firefox and a few other browsers display a &lt;strong&gt;notification bar&lt;/strong&gt; the first time a user loads an application that uses the application cache.&lt;/del&gt; [&lt;strong&gt;UPDATE:&lt;/strong&gt;Â  Since v. 26, there is no longer a notification bar on Firefox when websites use &lt;em&gt;appcache&lt;/em&gt;]&lt;/p&gt;

&lt;h2 id=&#34;see-also&#34;&gt;See also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A beginner&amp;#8217;s Guide to Using the Application Cache from HTML5Rocks: &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/appcache/beginner/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.html5rocks.com/en/tutorials/appcache/beginner/&#34;&gt;http://www.html5rocks.com/en/tutorials/appcache/beginner/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check browser compatibilities on HTML5Test: &lt;a href=&#34;http://html5test.com/compare/feature/offline-applicationCache.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://html5test.com/compare/feature/offline-applicationCache.html&#34;&gt;http://html5test.com/compare/feature/offline-applicationCache.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>A List Apart</title>
      <link>https://www.marcotroisi.com/a-list-apart/</link>
      <pubDate>Sat, 10 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/a-list-apart/</guid>
      <description>&lt;p&gt;I recently found a very interesting and relevant blog/magazine for web developers: &lt;a title=&#34;A List Apart&#34; href=&#34;http://www.alistapart.com/&#34; target=&#34;_blank&#34;&gt;A List Apart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;#8220;A List Apart Magazine&amp;#8230; explores the design, development, and meaning of web content, with a special focus on web standards and best practices.&amp;#8221; (from &lt;a href=&#34;http://www.alistapart.com/about/&#34;&gt;http://www.alistapart.com/about/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It seems to be a very well written magazine, and there are more than a few interesting articles, in my opinion. Not surprisingly, what I like more are the articles about the responsive design best practices.&lt;/p&gt;

&lt;p&gt;I believe this is one of the bookmarks every web developer should add to his browser!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why should you develop web apps</title>
      <link>https://www.marcotroisi.com/why-should-you-develop-web-apps/</link>
      <pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/why-should-you-develop-web-apps/</guid>
      <description>&lt;p&gt;So I want to start my blog with one of the arguments that have thrilled me in recent times more than anything else in the programming world: the web app vs native app thing. We&amp;#8217;re obviously focusing our attention on mobile platforms, as no one need someone explaining how much better it is to develop web-based apps for desktop than native ones. Software companies just shifted their efforts from &lt;em&gt;native/only one OS compatible/hard to keep updated/too much influenced by local machine performances&lt;/em&gt; apps to the web (especially after that wonderful browser called Firefox came and thaught to Microsoft and friends how a decent browser should work -a lesson they still seem not to have learnt); and, in my memory, that shift began from the years &lt;sup&gt;2006&lt;/sup&gt;&amp;frasl;&lt;sub&gt;07&lt;/sub&gt; on.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Would you have ever used -or, even known- Facebook if it only was a software to be installed on your Windows/Mac/Linux? I have reasons to think the answer is no. So, why are we talking again about the best choice between native and web &lt;a href=&#34;https://www.marcotroisi.com/wp-content/uploads/2012/09/blackberry_screen.png&#34;&gt;&lt;img class=&#34;alignright size-medium wp-image-27&#34; title=&#34;blackberry_screen&#34; alt=&#34;Web app on BlackBerry&#34; src=&#34;https://www.marcotroisi.com/wp-content/uploads/2012/09/blackberry_screen-300x238.png&#34; width=&#34;300&#34; height=&#34;238&#34; srcset=&#34;https://www.marcotroisi.com/wp-content/uploads/2012/09/blackberry_screen-300x238.png 300w, https://www.marcotroisi.com/wp-content/uploads/2012/09/blackberry_screen.png 383w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;even for apps we know there&amp;#8217;s no other way to succed than using the web as their main platform? The answer is quite simple: mobile devices. Or, to be more precise, the companies that make the OSs running on such devices. It&amp;#8217;s not needed to be said that Apple gets a huge amount of money from the apps that developers publish on their App Store. It&amp;#8217;s $99 per year, and 30% of every sales generated in-app. So, whilst desktop browsers have reached a level that allow you to develop practically everything using the web as your platform, mobile browser have not yet reached the same level. And, while companies like Apple and Google are getting a lot of external pressure to adopt the new HTML5 standards and to make their mobile browser acting just like their desktop versions do, they hesitate because they know they can get no revenue from people developing mobile web apps instead of native ones, and their OSs would also lose their uniqueness from the moment apps begin to work on any OS that have a decent and updated browser.&lt;/p&gt;

&lt;p&gt;But in my opinion things are -slowly- changing. Firstly, since version 4.0 of Android, Google introduced &lt;a href=&#34;http://www.google.com/intl/en/chrome/browser/mobile/android.html&#34;&gt;Chrome for Android&lt;/a&gt;, although it is not yet the default browser (with the exception of their Nexus 7), but it is obviously going to become it. And there are reasons to imagine they will at one point take their Chrome web store (where you can publish, and even sell, your web-based apps) on Android, and that I think is going to be breakthrough. Mozilla&amp;#8217;s doing the same with Firefox, and it&amp;#8217;s not a scoop that they will introduce their new &lt;a href=&#34;https://marketplace.mozilla.org/&#34;&gt;Mozilla Marketplace&lt;/a&gt; (something similar to Chrome web store, but with a few other &lt;a href=&#34;http://liliputing.com/2012/06/mozilla-marketplace-goes-live-install-web-apps-like-native-pc-apps.html&#34;&gt;interesting features&lt;/a&gt;). Even Apple&amp;#8217;s very very slowly improving Safari mobile (it&amp;#8217;s to be said that they&amp;#8217;re the only ones with that cool option &amp;#8220;Add to home screen&amp;#8221; on the main menu, which lets users create an icon launcher of your web app, just like a native app). Also, the next BlackBerry 10 browser seems to be &lt;a href=&#34;http://html5test.com/compare/browser/bb10.html&#34;&gt;very advanced&lt;/a&gt;, and the fact that Mozilla&amp;#8217;s going to launch their Firefox OS (which runs completely on HTML5) is simply exciting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are reasons why web apps on mobile have not succeded as they should until now, and they do not depend, in my opinion, on the web potentialities themselves, but on the OSs producers willingness. But there are also a lot of reasons for starting to seriously think about developing HTML5 cross-platform web apps, as things are going to change a lot in the next months, and it might be a huge waste of time (and money) to employ your resources in developing a native app for iOS, one for Android, one for BlackBerry and Windows Phone (not to say that in many cases smartphones and tablets with the same OS may require a different app to be developed).&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Troisi | technology, software development and productivity</title>
    <link>https://www.marcotroisi.com/categories/startups/index.xml</link>
    <description>Recent content on Marco Troisi | technology, software development and productivity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Marco Troisi</copyright>
    <atom:link href="https://www.marcotroisi.com/categories/startups/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Technical debt is not a unicorn</title>
      <link>https://www.marcotroisi.com/technical-debt-is-not-a-unicorn/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/technical-debt-is-not-a-unicorn/</guid>
      <description>&lt;p&gt;Amongst software engineers, there is this thing called &lt;em&gt;technical debt&lt;/em&gt; that is very often talked about and that tends to have somewhat of an ethereal nature.&lt;/p&gt;

&lt;p&gt;Almost every company will have the technical debt prophet who will try to convince her people that doing what &amp;#8220;feels good&amp;#8221; now is not going to pay off down the line, and that &amp;#8220;future generations&amp;#8221; will have to pay for it. But, almost inevitably, choices will be made that will inescapably lead to some degree of technical debt.&lt;/p&gt;

&lt;p&gt;The list of things that feel good now includes but is not limited to: shipping as fast as possible, making the manager happy, getting back to those hilarious videos on youtube, etc.&lt;/p&gt;

&lt;p&gt;The problem is that sometimes we fail to understand how much of a damage are we actually making with those poor choices being implemented.&lt;/p&gt;

&lt;h2 id=&#34;business-and-codebase-should-grow-together&#34;&gt;Business and codebase should grow together&lt;/h2&gt;

&lt;h3 id=&#34;the-first-stage-of-growth&#34;&gt;The first stage of growth&lt;/h3&gt;

&lt;p&gt;Think of the Business side of your company and its software codebase as two parts of the whole picture that should be growing and maturing together. So, for example, when the company is at its early stages, and the way everything is being run is very simple and lean because there isn&amp;#8217;t much to be run anyway, the software should also be really down to the basics. No unnecessary complexity, no premature optimisation. Keep it simple, keep it &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;clean&lt;/a&gt;. Write the cleanest code you possibly can, rely on a rock-solid, time tested set of tools. Don&amp;#8217;t adventure in something that you &lt;em&gt;think&lt;/em&gt; will be useful as you grow, rather make sure that you make it as easy as possible to transition the software to a different framework, database, architecture (e.g. a &lt;a href=&#34;https://www.marcotroisi.com/micro-services-a-quick-introduction/&#34;&gt;Microservices&lt;/a&gt; architecture).&lt;/p&gt;

&lt;h3 id=&#34;the-second-stage-of-growth&#34;&gt;The second stage of growth&lt;/h3&gt;

&lt;p&gt;As the company begins to gain traction, there will be a time of relatively rapid growth. The company is going from literally zero to hundreds or thousands of people using the particular services they offer. At this time, it will begin to become evident whether good choices were made in the prior stage; it should be very easy to change anything based on a new decision from the managers or, perhaps, from the customer&amp;#8217;s feedback. Changing anything should be a matter of hours, not days. Implementing a new feature should be an absolute pleasure. No important architectural change should be necessary in order for the whole platfom to keep functioning even in the face of thousands of new users being added daily. Of course, things like implementing a new cache layer to ease the pressure on the servers, or adding a new cluster for the database, are okay. But no discussion about changing framework, or adopting a new database should take place. If the framework or database adopted can&amp;#8217;t handle this type of pressure nicely, then someone made a very incompetent choice at the previous level, the one where this type of decisions were made. But ideally, all modern frameworks and databases should be able to manage the amount of traffic that is happening at this particular stage.&lt;/p&gt;

&lt;h3 id=&#34;the-third-stage-of-growth&#34;&gt;The third stage of growth&lt;/h3&gt;

&lt;p&gt;The third stage would be the one of multiplication. At this point, the company is so successful that it may want to launch its services abroad. As the product is already popular enough in its home country, say the US, you&amp;#8217;d expect that on day one of the launch to the next territory, say Europe, you&amp;#8217;d have to handle hundreds of thousands of new users, with support for multiple languages and a whole lot of things that will have to be customised on a single Country basis. This is the time where considerations like, &amp;#8220;should we switch framework&amp;#8221; or &amp;#8220;can our database handle this much&amp;#8221; are more than appropriate. Here more than anywhere else, it will become evident whether everyone did his/her job properly. If good choices were made and everyone acted like a professional at the prior stages, moving from one database to another, adopting a different framework, or switching to a more scalable architecture, should only be a matter of days. But, most importantly, the key people in the team should have a clear path in their mind of what needs to be done in order for that transition to take place. There should be no guessing.&lt;/p&gt;

&lt;h2 id=&#34;technical-debt-is-suicide&#34;&gt;Technical debt is suicide&lt;/h2&gt;

&lt;p&gt;Just like any other debt, technical debt will only lead to bad things. And as it increases, the chances of a company succeeding are going to be greatly diminished. There is an inversely proportional relationship between the two.&lt;/p&gt;

&lt;p&gt;Now imagine the opposite situation, of a company that does it all wrong. It would look something like this: at the first stage of growth, there would be two plausible scenarios. The first, would be that of premature optimisation with unnecessary choices and decisions being made, because of incompetent leaders and programmers who think their little company should have the same scalability that Google has. Days, weeks, are wasted implementing layers of caching and database clusters, and setting up complex development and deployment tools, without even enough people to maintain all this stuff. If anything breaks, the CTO, a team lead or a senior engineer needs to spend a day or two fixing the problem because there aren&amp;#8217;t even enough people to take care of it (you don&amp;#8217;t usually have devops or system people in a small startup). The growth of the company is slowed down, and you&amp;#8217;re lucky if it succeeds at all.&lt;/p&gt;

&lt;p&gt;The second scenario would be that of someone who wants to avoid at any cost the first scenario, and decides that, after all, the only thing that matters is for the company to keep growing as fast as possible. They won&amp;#8217;t waste an hour more on a ticket in order to write tests and to make sure the code is clean. They won&amp;#8217;t make sure it&amp;#8217;s easy at any point in future to switch database or even adopt a different ORM library. The &lt;em&gt;illusion&lt;/em&gt; of this scenario is that it is likely to get the company to the second stage of growth, even if at the cost of a few late nights and weekends spent fixing bugs and an overall unstable platform.&lt;/p&gt;

&lt;p&gt;At the second stage of growth, coming from the second scenario, choices that should have been made at the third stage, like switching to a different database or a change of architecture, will become necessary because the platform can&amp;#8217;t even handle the few thousands of new users that are being added on a periodic basis. What&amp;#8217;s even worse, a rewriting of many parts or the codebase will become inevitable and a lot of time will have to be spent desperately trying to raise the percentage of code covered by some sort of test.&lt;/p&gt;

&lt;p&gt;For the company coming from the first scenario, it won&amp;#8217;t look too different. A lof of technical choices that had been made in the first stage will be shown as wrong for the actual needs of this specific platform, and so again time will have to be spent switching and rewriting.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s hard to imagine a company getting to the third stage of growth under these circumstances, but if it does, it should look similar to what it would have looked like in normal conditions. But, again, it&amp;#8217;s unlikely to get there, and if it does, so much time and money will have been wasted to get here, that it will be hard to justify again any change or rewriting, though this is the only stage where those things would have actually made sense. It&amp;#8217;s also likely that a few key people in the engineering team has been replaced because of their incompetence, adding to everything else the costs of having to introduce new people and mosts importantly new leaders.&lt;/p&gt;

&lt;h2 id=&#34;avoiding-technical-debt&#34;&gt;Avoiding technical debt&lt;/h2&gt;

&lt;p&gt;Technical debt exists, it&amp;#8217;s real and it can be proven, almost touched. It&amp;#8217;s not a myth, and the first step to avoiding it is realising how damaging it can be. Doing things right will not only lead to building a successful platfom serving happy customers. It will also be a lot more fun. It&amp;#8217;s way more enjoyable to work on clean code, to be able to introduce a new feature in a matter of hours and not weeks. It&amp;#8217;s a lot better to spend time solving real problems rather than fixing bugs. And of course, no one wants to work late nights and weekends if it&amp;#8217;s not absolutely necessary.&lt;/p&gt;

&lt;h2 id=&#34;more-resources&#34;&gt;More resources&lt;/h2&gt;

&lt;h3 id=&#34;to-read&#34;&gt;To Read&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;The clean architecture&lt;/a&gt; (Uncle Bob Martin)&lt;/li&gt;
&lt;li&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;#038;camp=1789&amp;#038;creative=390957&amp;#038;creativeASIN=0132350882&amp;#038;linkCode=as2&amp;#038;tag=marctroi-20&amp;#038;linkId=7KDRFWMKHKFMNWAR&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt; &lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;#038;l=as2&amp;#038;o=1&amp;#038;a=0132350882&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;(Uncle Bob Martin)&lt;/li&gt;
&lt;li&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.com/gp/product/1617292397/ref=as_li_tl?ie=UTF8&amp;#038;camp=1789&amp;#038;creative=390957&amp;#038;creativeASIN=1617292397&amp;#038;linkCode=as2&amp;#038;tag=marctroi-20&amp;#038;linkId=CVFNNRQ23ADXVH4O&#34;&gt;Soft Skills: The software developer&amp;#8217;s life manual&lt;/a&gt; &lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;#038;l=as2&amp;#038;o=1&amp;#038;a=1617292397&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;(John Sonmez)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;to-watch&#34;&gt;To Watch&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HhNIttd87xs&#34;&gt;Architecture: the lost years&lt;/a&gt; (Uncle Bob Martin)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=vqEg37e4Mkw&amp;amp;list=PLJb2p0qX8R_r3crCVAxp57dvoqGGjD3yD&#34;&gt;Workflows of refactoring&lt;/a&gt; (Martin Fowler)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>What can we learn from Periscope</title>
      <link>https://www.marcotroisi.com/what-can-we-learn-from-periscope/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/what-can-we-learn-from-periscope/</guid>
      <description>&lt;p&gt;I have been using &lt;a href=&#34;http://www.periscope.tv&#34;&gt;Periscope&lt;/a&gt; for a while now, and I am really enjoying it. If you don&amp;#8217;t know it, Periscope is Twitter&amp;#8217;s new live streaming app, that allows anyone to stream directly from one&amp;#8217;s smartphone, and it will notify you as soon as someone you follow is live-streaming.&lt;/p&gt;

&lt;p&gt;The concept of live streaming is not a new one, but Periscope (alongside with their competitor, &lt;a href=&#34;https://meerkatapp.co/&#34;&gt;Meerkat&lt;/a&gt;) has made it really easy to do so from a mobile device and, most importantly, to create a community of followers around it.&lt;/p&gt;

&lt;p&gt;If you are on Twitter, it makes sense that you&amp;#8217;d want to give Periscope a shot. What makes it different from YouTube is of course the live element, what makes it different from, say, &lt;a href=&#34;https://plus.google.com/hangouts/onair&#34;&gt;Google Hangouts On Air&lt;/a&gt;, is the sense of &lt;em&gt;impromptu-ness&lt;/em&gt; and familiarity that it creates, as you&amp;#8217;re literally speaking from your phone, but also the fact that you already have a community of followers that will be notified when you start streaming, so there is no need to plan it in advance.&lt;/p&gt;

&lt;p&gt;Personally, I have been using Periscope as a watcher, rather than a streamer, in order to follow some of my favourite people that I already follow on other social media channels.&lt;/p&gt;

&lt;h2 id=&#34;what-8217-s-great-about-periscope&#34;&gt;What&amp;#8217;s great about Periscope&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;alignright wp-image-446 size-full&#34; src=&#34;https://www.marcotroisi.com/wp-content/uploads/2015/09/periscope.png&#34; alt=&#34;periscope&#34; width=&#34;228&#34; height=&#34;228&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you use Periscope, two things will become obvious to you after a little while:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The app is beautifully designed. It&amp;#8217;s elegant yet simple to use.&lt;/li&gt;
&lt;li&gt;There is still a lot that can be improved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I find this great, and I think there is something engineers, product managers and other people involved in building apps and online services can learn. It&amp;#8217;s something that has to do with focus, with avoiding being a perfectionist and with not wasting time. Here&amp;#8217;s what I think are the lesson Periscope&amp;#8217;s creators can teach us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Core business&lt;/strong&gt;. Spend some time understanding what exactly your core business is about, and focus mainly on that until you know it&amp;#8217;s absolutely awesome. In Periscope&amp;#8217;s case the core business is &lt;em&gt;live streaming&lt;/em&gt;. There is much more they can do to make the app better and better, like a better player for re-watching videos, a landscape mode, perhaps even a web/desktop version of the app. But, the things that are there, are absolutely great. The app does only a few things, but it works so well! It&amp;#8217;s smooth, it&amp;#8217;s elegant, it&amp;#8217;s simple. In other words, it&amp;#8217;s addictive. Just like Twitter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Perfectionism is bad&lt;/strong&gt;. Saying that you want your app to be great is one thing. Trying to make it perfect is unrealistic. Once you&amp;#8217;ve found your core business, make sure you deliver enough functionalities so that users can actually understand, and enjoy, the core business. When you use Periscope, it won&amp;#8217;t take you long before realising that the app is all about live streaming and creating a community around live videos. That&amp;#8217;s it. Like I said, there are so many functionalities they could add, but trying to have them all from the start, would have delayed indefinitely their launch, and would have probably confused people on what the app is about. Think of Google and their years-long beta version of Gmail: they kept it in beta knowing that they wanted to keep improving it. Yet, the core functionalities where there, and, frankly, they were great from the beginning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&amp;#8217;t waste time&lt;/strong&gt;. In the programming world, we talk about &lt;em&gt;premature optimisation&lt;/em&gt; as the unfortunate situation where programmers spend too much time thinking about how to make sure the app is ready for a lot of functionalities that, from a business point of view, may not even have been decided yet. The solution to that, is to develop software that has a solid foundation, and that is flexible enough that you can keep improving it and adding to it without fear of breaking something in the process. Periscope seems to have done this. Since I have been using it, I have experienced no crashes. The app works really well and it seems to me to be pretty stable. Yet, as I have already said, there are things they could add to make it better. But what is there is enough to make people want to use it, and the foundation has been laid for adding new features that will make it even better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In conclusion, Periscope is a great app, but what is making it a huge success is how they have handled the development phase. If you like Meerkat or other competitor apps, that&amp;#8217;s great, but the reason why I didn&amp;#8217;t like it, was that I found it overly complex and it just didn&amp;#8217;t feel as smooth and simple to use. It lacks focus. On the flip side, Periscope developers seem to have gotten it right.&lt;/p&gt;

&lt;p&gt;This is of course just my point of view, and I would love to hear yours! &lt;a href=&#34;https://twitter.com/MarcoTroisi/status/639770687045894145&#34;&gt;Let me know&lt;/a&gt; what you think.&lt;/p&gt;

&lt;h2 id=&#34;more-resources&#34;&gt;More resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://michaelhyatt.com/what-i-love-about-periscope.html&#34;&gt;What I love about Periscope&lt;/a&gt; (Michael Hyatt)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/B014IP8RU2/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B014IP8RU2&amp;amp;linkCode=as2&amp;amp;tag=marctroi-20&amp;amp;linkId=CWTOFMMUFKNYIKLR&#34;&gt;Periscope Your Biz: Live Video Broadcasting for Profits&lt;/a&gt; &lt;img style=&#34;border: none !important; margin: 0px !important;&#34; src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;l=as2&amp;o=1&amp;a=B014IP8RU2&#34; alt=&#34;&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; /&gt;(Book &amp;#8211; Amazon)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/B012H76NMC/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B012H76NMC&amp;amp;linkCode=as2&amp;amp;tag=marctroi-20&amp;amp;linkId=Z4TNTOACIIF5P66N&#34;&gt;Leveraging Twitter&amp;#8217;s Periscope: Join The Community, Build Your Business, and Have Fun!&lt;/a&gt; &lt;img style=&#34;border: none !important; margin: 0px !important;&#34; src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;l=as2&amp;o=1&amp;a=B012H76NMC&#34; alt=&#34;&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; /&gt;(Book &amp;#8211; Amazon)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>How technology will open even more doors for people to work together</title>
      <link>https://www.marcotroisi.com/how-technology-will-open-more-doors-for-people-to-work-together/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/how-technology-will-open-more-doors-for-people-to-work-together/</guid>
      <description>&lt;p&gt;After reading [levels.io][&lt;a href=&#34;http://www.levels.io]&amp;amp;#8216;s&#34;&gt;http://www.levels.io]&amp;amp;#8216;s&lt;/a&gt; latest brilliantly written [article][&lt;a href=&#34;https://levels.io/a-future-of-two-extremes/&#34;&gt;https://levels.io/a-future-of-two-extremes/&lt;/a&gt;], I started thinking about a future, as suggested by the article, of massive corporations on one hand and billions of self employed individuals on the other.&lt;/p&gt;

&lt;p&gt;Now of course, one need not be a financial analyst to see that companies like Amazon, Google and Apple are going to &amp;#8220;rule the world&amp;#8221; in many ways in the near future (in a sense, they already do). We all accept that. And looking at, for example, the amount of pressure that these companies are able to put on their governments, one also wonders what the future of politics will look like.&lt;/p&gt;

&lt;p&gt;What I struggle to agree with, is this vision of a world of &lt;strong&gt;self employed individuals&lt;/strong&gt;. Now, granted, being a freelancer or any sort of self employed worker is becoming increasingly popular and, in some countries, easier than ever. And I bet this trend is going to keep growing in the foreseeable future.&lt;/p&gt;

&lt;p&gt;But I have also noticed another trend becoming a reality in the last two or three years. It is called &lt;strong&gt;specialisation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Going back a few years ago, it was entirely normal for the same person to be able to do some backend coding, to know a bit of CSS and HTML and also to be able to use Photoshop&amp;#8217;s main functionalities in order to design a decent-looking interface. SEO was never a big issue, all you had to do was to buy a few links. And of course mobile native apps weren&amp;#8217;t even a thing.&lt;/p&gt;

&lt;p&gt;Things today are different. Yes, it is still possible for an individual to do all these things but not without compromising something and with clear limits in terms of scale. I realise that there may be exceptions here, and levels.io&amp;#8217;s success with the [startups he founded][&lt;a href=&#34;https://levels.io/12-startups-12-months/&#34;&gt;https://levels.io/12-startups-12-months/&lt;/a&gt;] in the last few months is striking and encouraging. But I think what his and others&amp;#8217; success says is that, at best, and if a lot of things go like they should, it is possible to build something on your own. This is amazing! But it also says absolutely nothing to disprove the power of, for example, a startup where, say, two, ten or even fifty people, each one of them incredibly well prepared in his/her own field, put their heart and soul in a project.&lt;/p&gt;

&lt;p&gt;One person can build a project/company and can have some degree of success with it. But can that same person keep doing that forever and make that company keep growing? History tells us that this happens rarely if ever. There is something about &lt;strong&gt;a group of people&lt;/strong&gt; serving each other and, ultimately, their customers, with different skill sets and personalities. And there is something about building a company, a product, an organisation, that doesn&amp;#8217;t just last for a few months or years, but that lasts for as many years as possible, leaving an actual impact and making a real difference in people&amp;#8217;s lives, in a way or another.&lt;/p&gt;

&lt;h2 id=&#34;anyone-with-a-laptop-can-build-airbnb-or-can-he&#34;&gt;Anyone with a laptop can build Airbnb. Or, can he?&lt;/h2&gt;

&lt;p&gt;The idea that, if you do things on your own, a &amp;#8220;kid from Africa with a laptop&amp;#8221; can build something better and rob you of your market in a couple of months, is &lt;em&gt;exactly&lt;/em&gt; the reason why companies formed by &lt;em&gt;at least&lt;/em&gt; two people are a winner. In the &lt;strong&gt;open source&lt;/strong&gt; world, we have known this for a long time: there is power in a group of people committing their time and skills to a project and a vision.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That a “kid with a laptop” can build smtg better than your one-man startup in a few weeks, is exactly why companies usually win. [&lt;a href=&#34;https://twitter.com/intent/tweet?source=tweetbutton&amp;#038;text=%22That+a+kid+with+a+laptop+can+build+smtg+better+than+your+1-man+startup+in+a+few+weeks,+is+exactly+why+Companies+win.%22&amp;#038;via=marcotroisi&#34; target=&#34;_blank&#34;&gt;tweet this&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Technology has given us an incredible amount of tools that we can use to build our projects and companies. People all over the world, and for years now, have built the most amazing blogs, websites, apps, etc. But there comes a time where you will need to go to the next level, and some people with different skills will need to be added to your team. This is what we call a Company, or an Organisation. It&amp;rsquo;s that easy. And as I look at the future, I see plenty and increasing opportunities to join forces with &lt;strong&gt;highly specialised&lt;/strong&gt; people to build things that really are meaningful.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

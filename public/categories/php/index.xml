<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Troisi | technology, software development and productivity</title>
    <link>https://www.marcotroisi.com/categories/php/index.xml</link>
    <description>Recent content on Marco Troisi | technology, software development and productivity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Marco Troisi</copyright>
    <atom:link href="https://www.marcotroisi.com/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Healthy OOP</title>
      <link>https://www.marcotroisi.com/healthy-oop-object-oriented-programming/</link>
      <pubDate>Mon, 23 May 2016 08:34:57 +0100</pubDate>
      
      <guid>https://www.marcotroisi.com/healthy-oop-object-oriented-programming/</guid>
      <description>

&lt;p&gt;I enjoy writing code in an Object Oriented fashion. Thinking in terms of objects gives me
a model that, when followed consistently, ends up producing code that is well organised,
and that I know to be relatively easy to understand, test, and refactor.&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&#34;https://mcollina.github.io/we-are-not-object-oriented-anymore/&#34;&gt;some people&lt;/a&gt; would want to argue that OOP doesn&amp;rsquo;t really work and/or that we don&amp;rsquo;t need it anymore to build modern software. While I by no means think or want to say that OOP is the ultimate paradigm, I would definitely want to maintain that &lt;em&gt;it is&lt;/em&gt; helpful and that a bunch of procedural code, however &lt;em&gt;nicely&lt;/em&gt; organised (even if that means &lt;a href=&#34;http://marcotroisi.com/microservices-wont-improve-your-code-quality/&#34;&gt;microservices&lt;/a&gt;), &lt;em&gt;is not&lt;/em&gt; the answer.&lt;/p&gt;

&lt;p&gt;The problem with a lot of the criticism that OOP gets, is that it tends to refer to things that in popular programmer culture have become somehow associated with OOP (like the use of ORM), while that isn&amp;rsquo;t really the case.&lt;/p&gt;

&lt;p&gt;Object Oriented Programming &lt;em&gt;done well&lt;/em&gt;, or what I call &lt;strong&gt;Healthy OOP&lt;/strong&gt;, comes with a lot of benefits. Here&amp;rsquo;s a number of things everyone needs to know in order to write good quality code in an OOP way.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;orm-no-thanks&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;orm-no-thanks&#34;&gt;ORM? No, thanks&lt;/h2&gt;

&lt;p&gt;The main problem with using an ORM in an Object Oriented software is, to put it simply, that ORM-related code is overwhelmingly not Object Oriented. I am not saying it is bad per se, and I am not buying into &lt;a href=&#34;http://martinfowler.com/bliki/OrmHate.html&#34;&gt;Orm Hate&lt;/a&gt; just for the sake of it. But, at least if you&amp;rsquo;re trying to write good quality Object Oriented code, using an ORM is probably not the smartest choice out there.&lt;/p&gt;

&lt;p&gt;The biggest issue here is that when you use an ORM you are encouraged to create what you are told to be objects, and use them as &lt;em&gt;mappers&lt;/em&gt; to a database table (or collection). While this may sound very convenient
on paper, in practice it will inevitably lead you to create big classes, at least as big as your database tables.&lt;/p&gt;

&lt;p&gt;Not only that, but it will also encourage you to skip the &amp;ldquo;thinking&amp;rdquo; process, or the architectural side of things.
In other words, when all you have to do is to &lt;em&gt;replicate&lt;/em&gt; the exact same structure of your tables into classes (and please don&amp;rsquo;t make the mistake of thinking of them as objects, because they are not), and when most of this is
probably done for you by some sort of automated &lt;em&gt;table-to-class&lt;/em&gt; generator, then there is almost no point in which it makes sense to sit down and thinking through what&amp;rsquo;s the appropriate architecture and the best organisation for the software. You&amp;rsquo;re going to create a bunch of classes that represent your tables, and you&amp;rsquo;ll just work with them as they are.&lt;/p&gt;

&lt;p&gt;But database tables are meant to be relatively big collections of data, in a structured and easy-to-query fashion. There is very little correlation between that and your Objects, which are supposed to be kept small, cohesive, easy to extend, refactor and manipulate. Not to mention the need to keep your &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;&lt;em&gt;architecture clean&lt;/em&gt;&lt;/a&gt;, which won&amp;rsquo;t happen if you start tightening up your code with whichever database you&amp;rsquo;ve decided to use. It will eventually cause &lt;a href=&#34;http://marcotroisi.com/technical-debt-is-not-a-unicorn/&#34;&gt;technical debt&lt;/a&gt;, and that simply tells you something went wrong at an architectural decision level.&lt;/p&gt;

&lt;p&gt;So there is a case to be made against the use of ORMs in general, but even more so if you&amp;rsquo;re doing OOP.&lt;/p&gt;

&lt;p&gt;A note of clarification is due here: if you&amp;rsquo;re building software with a clean architecture, and you really, really want to use
an ORM, there may be a place for it, and that&amp;rsquo;s at the level of the &lt;em&gt;Interface Adapters&lt;/em&gt;, where you would build proper interfaces between your Objects (at the &lt;em&gt;Entities&lt;/em&gt; and &lt;em&gt;Use cases&lt;/em&gt; levels) and your ORM &amp;ldquo;mappers&amp;rdquo;. If you have no idea what I&amp;rsquo;m talking about here, please do yourself a favour and read Uncle Bob Martin&amp;rsquo;s article on &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;the clean architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, my favourite approach would be to build &lt;a href=&#34;http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html&#34;&gt;SQL-speaking Objects&lt;/a&gt;, as suggested by Yegor Bugayenko in both his blog and &lt;a href=&#34;http://amzn.to/1R0NSpg&#34;&gt;his latest book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At any rate, if you decide to go with an ORM, that&amp;rsquo;s entirely your prerogative, and it&amp;rsquo;s not wrong in itself. But make sure you&amp;rsquo;re building things in a &lt;em&gt;clean&lt;/em&gt; fashion, and don&amp;rsquo;t use the ORM-generated mappers as your main objects for your business logic.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;accessors-and-mutators-vs-useful-methods&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;accessors-and-mutators-vs-useful-methods&#34;&gt;Accessors and mutators vs useful methods&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Accessors&lt;/em&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Mutator_method&#34;&gt;&lt;em&gt;mutators&lt;/em&gt;&lt;/a&gt;,
also known as getters and setters, are incredibly popular today. Most IDEs will even automatically generate them for you, which make them even more tempting, as you can have them there and ready to use in just a few seconds.&lt;/p&gt;

&lt;p&gt;Why then take the time to think about more appropriate, expressive and useful methods? There are a few advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It makes your Object closer to a real-world entity.&lt;/strong&gt; &lt;code&gt;Email.enableAutoresponder()&lt;/code&gt; is simply a lot nicer and more expressive than &lt;code&gt;Email.setAutoresponder(true)&lt;/code&gt;, and it&amp;rsquo;s closer to how you would conceive that operation in the real world&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You don&amp;rsquo;t need to expose all of your internal variables.&lt;/strong&gt; What&amp;rsquo;s the point of having your variables as &lt;code&gt;private&lt;/code&gt; if you&amp;rsquo;re going to have setters and getters for all of them? You might as well have them all &lt;code&gt;public&lt;/code&gt;!
The reality is that you often don&amp;rsquo;t need to expose your variables to the outside world.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In OOP, it&amp;rsquo;s better to expose just a limited number of highly focussed and expressive methods, and handle everything else internally.&lt;/p&gt;

&lt;p&gt;As a representation of a real world entity, your object should be able to do more than just exposing a bunch of variables through getters and setters.&lt;/p&gt;

&lt;p&gt;Ultimately and probably the biggest benefit is that by following a more expressive approach you are always going to force yourself to think about the internal architecture of your object (as opposed to not delegating its functionalities to automatically generated getters and setters) by exposing only relevant information via nice and expressively named methods.&lt;/p&gt;

&lt;p&gt;A great approach to doing this is to first &lt;strong&gt;create an interface&lt;/strong&gt; where you would define all the methods that will be exposed by your object. Then, create your object, making it implement the interface you just defined, and then start filling those methods with actual functionalities, all the while writing your tests for the methods you are working on.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;real-world-entities-are-better-than-services&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;real-world-entities-are-better-than-services&#34;&gt;Real world entities are better than Services&lt;/h2&gt;

&lt;p&gt;This is a point that I keep coming back to: take the time to &lt;strong&gt;think about your objects&lt;/strong&gt; and the overall architecture.&lt;/p&gt;

&lt;p&gt;You should see your objects as &lt;strong&gt;real world entities&lt;/strong&gt;, rather than data structures, &amp;ldquo;helpers&amp;rdquo;, or &amp;ldquo;services&amp;rdquo;.
So, again, instead of replicating your database tables, think about real world examples that would make sense in your case, and expose real behaviour, rather than a bunch of accessors.&lt;/p&gt;

&lt;p&gt;Instead of building a &lt;code&gt;class PasswordEncrypter&lt;/code&gt; (or &lt;code&gt;class PasswordEncryptionService&lt;/code&gt;) that takes in passwords and encrypts them using the algorithm of choice, think in terms of small, more maintainable, composable and extendable objects.&lt;/p&gt;

&lt;p&gt;Why not defining a simple interface like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type EncryptedPasswordInterface interface {
  func encryptedValue() string;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then have simple, small classes implementing that interface to encrypt a given password using a certain algorithm.
Something like &lt;code&gt;Sha1EncryptedPassword&lt;/code&gt;. And then something like &lt;code&gt;Sha1EncryptedPasswordWithSalt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Following this approach, you&amp;rsquo;ll never end up with overbloated, ever-growing &amp;ldquo;Services&amp;rdquo;, which are really Do-it-all classes, a blatant violation of the &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The main point here is that you want to build in a way that always allows you to keep things small, composable, and breakable into smaller pieces. Your want your objects to be &lt;em&gt;very specific&lt;/em&gt; and single-focussed.&lt;/p&gt;

&lt;p&gt;The problem with a &lt;code&gt;PasswordEncrypter&lt;/code&gt; would have been that even if at the beginning it supported only one encryption algorithm, the number of such algorithms could have grown with time, and there would have been no obvious way to break things into smaller pieces.&lt;/p&gt;

&lt;p&gt;Notice that I am not saying that it couldn&amp;rsquo;t have been done, what I am saying is that there wouldn&amp;rsquo;t have been an obvious way to do it, which is after all my main point of contention with OOP: it&amp;rsquo;s a &lt;em&gt;system&lt;/em&gt; that gives you a more obvious way to consistently keep your code organised, easy to break into smaller pieces, easy to understand.&lt;/p&gt;

&lt;p&gt;In the example above, the real world entity is the &lt;em&gt;encrypted password&lt;/em&gt;, as defined by the initial interface. It is very easy to
imagine that this password could have been encrypted with as many encryption algorithms as you can think of, and all you need to do
is to have an object representing each one of those algorithms. Want to encrypt a password with an algorithm on top of another one? Create an object for it (probably the best approach), or do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;md5Password := NewMd5EncryptedPassword(unencryptedPassword);
encryptedPassword := NewSha1EncryptedPassword(md5Password.encryptedValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, &lt;code&gt;encryptedPassword&lt;/code&gt; will have double encryption, MD5 and SHA1. A different approach would be
to build a &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;decorator&lt;/a&gt;&lt;/em&gt;, which is an invaluable tool in OOP. It would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Constructor for Sha1PasswordFromMd5
func NewSha1PasswordFromEncrypted(md5EncryptedPassword *EncryptedPasswordInterface) (p *Sha1PasswordFromEncrypted) {
  return &amp;amp;Sha1PasswordFromEncrypted{md5EncryptedPassword};
}
// Sha1PasswordFromEncrypted is a decorator that takes as an argument
// EncryptedPasswordInterface and returns this value with Sha1 encryption
type Sha1PasswordFromEncrypted struct {
  var Md5EncryptedPassword *EncryptedPasswordInterface;
}
func (p *Sha1PasswordFromEncrypted) encryptedValue() string {
  // here encrypt Md5EncryptedPassword with sha1 and return value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, &lt;code&gt;Sha1PasswordFromEncrypted&lt;/code&gt; is a decorator that takes as a parameter an object that implements its very same interface,
&lt;code&gt;EncryptedPasswordInterface&lt;/code&gt;. It then applies Sha1 encryption on top of the already existing one, and returns the encrypted value as demanded by its interface.&lt;/p&gt;

&lt;p&gt;These are all examples of course, and you would have to use the best approach that works for what you&amp;rsquo;re trying to build.
But the main idea is to build objects as representations of real world (not necessarily physical) entities.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;use-interfaces&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-interfaces&#34;&gt;Use interfaces&lt;/h2&gt;

&lt;p&gt;Interfaces can be a controversial topic. Oddly enough, I&amp;rsquo;ve found myself having to justify the use of interfaces or making the case for them to other developers more often than it would have been reasonable.&lt;/p&gt;

&lt;p&gt;Unfortunately, some languages (see Javascript) don&amp;rsquo;t even come with first class support for interfaces (although the
excellent Typescript &lt;a href=&#34;http://www.typescriptlang.org/docs/handbook/interfaces.html&#34;&gt;does&lt;/a&gt;), whereas in some other languages,
like PHP, interfaces were a later addition and some developers don&amp;rsquo;t seem to have ever taken the time to study the matter
and understand what the use cases for them are. Golang has had support for interfaces since the beginning, and their use seems to be part of the language&amp;rsquo;s &lt;em&gt;ethos&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are many reasons to use interfaces. Personally, I tend to create an interface for virtually every object that I create.
This has several benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It allows me to define &lt;em&gt;what the object does&lt;/em&gt; without having yet to worry about actual implementation of functionalities and related tests&lt;/li&gt;
&lt;li&gt;It makes writing tests &lt;strong&gt;very easy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;By defining the &lt;em&gt;signature&lt;/em&gt; of an object, I&amp;rsquo;m forcing it to adhere to a &lt;strong&gt;contract&lt;/strong&gt; of sort, as my object&amp;rsquo;s public methods will all be described by a previously designed interface.&lt;/li&gt;
&lt;li&gt;It makes it easier to avoid more obvious violations of the &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Interface_segregation_principle&#34;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;It gives me the flexibility to quickly &lt;em&gt;swap one object for another&lt;/em&gt;, as long as the interface adopted is the same&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No matter what language you&amp;rsquo;re working with, make it a point to have an abstract signature of your object before you go ahead with the actual implementation.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusion&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are other good practices that can be kept in mind while doing OOP, such as aiming for object&amp;rsquo;s immutability.
But I believe that by at least keeping in mind the practices listed above, you can write high quality Object Oriented Code that makes sense and that you can be proud of.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further reading:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html&#34;&gt;Why getter and setter methods are evil&lt;/a&gt; - Allen Holub&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yusufaytas.com/achieving-abstraction-in-javascript/&#34;&gt;Achieving Abstraction In JavaScript&lt;/a&gt; - Yosuf Aytas&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html&#34;&gt;Objects should be immutable&lt;/a&gt; - Yegor Bugayenko&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spf13.com/post/is-go-object-oriented/&#34;&gt;Is Go OOP?&lt;/a&gt; - Steve Francia&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/1R0NSpg&#34;&gt;Elegant Objects&lt;/a&gt; [Amazon] - Yegor Bugayenko&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Composition over Inheritance (what it is, why use it)</title>
      <link>https://www.marcotroisi.com/composition-over-inheritance/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/composition-over-inheritance/</guid>
      <description>&lt;p&gt;In today&amp;#8217;s article, I would like to talk about something which I see that, sometimes, developers aren&amp;#8217;t too familiar with. Most of us know what the traditional concept of &lt;strong&gt;inheritance&lt;/strong&gt; is: a child class extends a parent class. And, obviously, multiple children classes can extend the same parent class.&lt;/p&gt;

&lt;p&gt;What some developers don&amp;#8217;t seem to be always aware of (or, perhaps, they just aren&amp;#8217;t entirely sure how to use it), is the idea of &lt;strong&gt;composition&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-composition&#34;&gt;What is Composition&lt;/h2&gt;

&lt;p&gt;Composition can be explained by a child class &amp;#8220;incorporating&amp;#8221; one or more classes that it intends to extend. In other words, you are declaring inside your class, what other class&amp;#8217; methods do you want to be able to use, without having to strongly tie up your children class to its parent(s).&lt;/p&gt;

&lt;h3 id=&#34;has-a-vs-is-a&#34;&gt;&lt;em&gt;Has-a&lt;/em&gt; VS &lt;em&gt;Is-a&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;A good way to look at Composition is to think of a class that &lt;em&gt;HAS-A&lt;/em&gt; relationship with another class, rather &lt;em&gt;IS-A&lt;/em&gt; &amp;#8220;son&amp;#8221; of that class. In this sense, when you use Composition, the class has an &amp;#8220;identity&amp;#8221; of its own, and it&amp;#8217;s not to be seen as being &amp;#8220;only&amp;#8221; a son of that other class which it extends.&lt;/p&gt;

&lt;h2 id=&#34;the-benefits-of-composition&#34;&gt;The Benefits of Composition&lt;/h2&gt;

&lt;p&gt;While I am not advocating for the complete elimination of traditional inheritance, there are benefits of using Composition that I would like to highlight. And, the way I see it, it is possible that once we realise the power of Composition over Inheritance, we may actually end up using Inheritance less and less. Here are the reasons why Composition is a good pattern:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: it is not by chance that I am giving this one the first position in my list. With Inheritance, as mentioned, you tie your Class up to another one, and you define even before starting to design your class, who is going to extend (be a child of) what. But, what happens if you wanted to only use &lt;em&gt;some&lt;/em&gt; of the methods that your parent has? Or, on the opposite side, what if you had 5 children of which only 2 needed a couple of additional methods? These things would not have been a problem with Composition. But the truth is that &lt;strong&gt;Inheritance is often not flexible enough&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extension of Multiple Classes&lt;/strong&gt;: who says you should only extend one Class? Why couldn&amp;#8217;t &lt;code&gt;Corolla&lt;/code&gt; be a son of &lt;code&gt;Car&lt;/code&gt; but also of &lt;code&gt;Toyota&lt;/code&gt; at the same time? That obviously makes sense, but it&amp;#8217;s normally not possible in traditional programming languages. &lt;a href=&#34;http://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces_in_object-oriented_languages&#34;&gt;Interfaces&lt;/a&gt; can give us some help here, but they &lt;em&gt;don&amp;#8217;t&lt;/em&gt; actually implement the methods we need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid duplicates&lt;/strong&gt;: Like in the previous example, if we were to use Interfaces for our &lt;code&gt;Corolla&lt;/code&gt; Class, we would end up having to write some of our methods for our &lt;code&gt;Yaris&lt;/code&gt; or &lt;code&gt;Sedan&lt;/code&gt; Classes. That&amp;#8217;s not cool. Duplicating code is not a good idea.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are other benefits to using Composition, but those are the ones I feel are the most worthy of being highlighted here.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-use-composition-in-insert-programming-language-here&#34;&gt;How do I use Composition in &lt;em&gt;[insert programming language here]&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Composition is available out of the box in &lt;a href=&#34;http://en.wikipedia.org/wiki/Trait_(computer_programming)#Supported_languages&#34;&gt;many of the mainstream languages&lt;/a&gt;. It can be implemented in the form of a &lt;em&gt;Trait&lt;/em&gt; in PHP, Python, Scala and others; It&amp;#8217;s called a &lt;em&gt;Module&lt;/em&gt; in Ruby, and a &lt;em&gt;Role&lt;/em&gt; in Perl. Javascript, as per usual, has &lt;a href=&#34;http://rjzaworski.com/2013/03/composition-in-javascript&#34;&gt;unique ways to implement Composition&lt;/a&gt;, but it&amp;#8217;s there. Finally, it&amp;#8217;s interesting to note that Go doesn&amp;#8217;t even consider Inheritance as an option; Composition is the only game in town, and it&amp;#8217;s called &lt;a href=&#34;http://golang.org/doc/effective_go.html#embedding&#34;&gt;Embedding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: what are your thoughts on Composition over Inheritance? Where is it best to use one over the other? Share your ideas on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=https://www.marcotroisi.com/composition-over-inheritance/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=https://www.marcotroisi.com/composition-over-inheritance/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=goo.gl/AU3t8k&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;more-to-read-on-composition-over-inheritance&#34;&gt;More to read on Composition over Inheritance&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.clean-code-developer.com/Favor-Composition-over-Inheritance.ashx&#34;&gt;Clean Code Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Composition_over_inheritance&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codingdelight.com/2014/01/16/favor-composition-over-inheritance-part-1/&#34;&gt;Coding Delight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>An example of a Microservice</title>
      <link>https://www.marcotroisi.com/an-example-of-a-microservice/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/an-example-of-a-microservice/</guid>
      <description>&lt;p&gt;After writing on &lt;a href=&#34;https://www.marcotroisi.com/micro-services-a-quick-introduction/&#34;&gt;Microservices&lt;/a&gt;, I received a few feedbacks from people who found the topic fascinating but struggled to see how to effectively apply it in reality. So I decided to develop a little microservice, to use as a practical example. &lt;/p&gt;

&lt;h2 id=&#34;introducing-microtranslator&#34;&gt;Introducing MicroTranslator&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/marcotroisi/microtranslator&#34;&gt;MicroTranslator&lt;/a&gt;&lt;/strong&gt; is a microservice that I have built, which is supposed to handle locale and translations in an application. Its tech stack is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP &amp;gt;= 5.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fatfreeframework.com&#34;&gt;Fat Free framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mossphp/moss-locale&#34;&gt;Moss Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del datetime=&#34;2015-07-20T07:04:33+00:00&#34;&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; at the time of this writing (14 Apr &amp;#8217;15) I am still working on MicroTranslator. It will be production-ready (documentation included) in a few days. Sorry about that!&lt;/em&gt;&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&#34;it-comes-with-rest-api&#34;&gt;It comes with REST API&lt;/h2&gt;

&lt;p&gt;MicroTranslator provides simple-to-use REST API. For this reason, you need to know little to no PHP to use it. Simply fire up an instance of PHP on whatever machine you like, and then use the APIs to get the translations on the other Microservices that compose your application.&lt;/p&gt;

&lt;p&gt;Now this is important, in my opinion. It means that you can quickly begin working on your application without having to focus on a tedious task such as handling translations, but also that, at any point in time, you can completely get rid of it and rewrite it with, perhaps, a faster language. Or you can simply upgrade your hardware and keep relying on it.&lt;/p&gt;

&lt;h2 id=&#34;8220-i-could-have-done-this-myself-8221&#34;&gt;&amp;#8220;I could have done this myself&amp;#8221;&lt;/h2&gt;

&lt;p&gt;You may think now, &amp;#8220;why should I use your stuff when I can write my own translation manager, using the tools that I like the most?&amp;#8221; The simple answer here is &amp;#8220;You shouldn&amp;#8217;t (use my translation manager)!&amp;#8221;&lt;/p&gt;

&lt;p&gt;But I would also like to point out that, unless translations represent the core of your application, there is no reason why you would want to waste your time rewriting a library that does the same thing. But even if you do, what you should be avoiding is to tie it all up with the rest of your application. Using a Microservices architecture will allow you to &lt;em&gt;replace&lt;/em&gt; parts of your application quickly and seamlessly. And, it will give you the power of choosing the right tools, framework, database, etc for the task.&lt;/p&gt;

&lt;h2 id=&#34;point-by-point&#34;&gt;Point by point&lt;/h2&gt;

&lt;p&gt;Like I said, one of the reasons why I worked on MicroTranslator is because I wanted to create a real-life example out of my previous article on &lt;em&gt;what is a Microservice&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s have a look at the points I outlined back then:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;It is a Stand-alone service/application.&lt;/strong&gt;: Yes, MicroTranslator is stand-alone. It doesn&amp;#8217;t need, and actually, it doesn&amp;#8217;t want, to be included into your PHP application. You can connect to it, get and send to it all the data that you need, but you will not find MicroTranslator-specific code in your application. Just generic REST API calls.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is quick to (re)write.&lt;/strong&gt;: Absolutely! I wrote MicroTranslator in a weekend plus a few other free hours during the week. You can totally rewrite it in a week or less as soon as you feel like it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It focuses on one task&lt;/strong&gt;: It only cares about your translations. It doesn&amp;#8217;t even want to know how you use them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is Language-agnostic.&lt;/strong&gt;: Well, MicroTranslator is clearly written in PHP, but you can use its APIs from any application, regardless of the language/framework/tools you are using.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is aware of failures&lt;/strong&gt;. This clearly depends on the rest of the application. But, for example, you can cache the translations that you get from MicroTranslator, so that, should it be unreachable at a certain point in time, you can still handle the situation graciously. One thing is sure: if MicroTranslator goes down, it won&amp;#8217;t &lt;em&gt;directly&lt;/em&gt; affect your main application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;in-practice-it-8217-s-not-that-difficult&#34;&gt;In practice, it&amp;#8217;s not that difficult&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s amazing how simple things can look like when we see them in real-life examples. In fact, despite the buzzword-mania and all the hype around Microservices, something that we often fail to understand is how simple they are. Building a Microservice is as simple as a few days of work. Building an entire application based on a Microservices Architecture is as simple as being able to separate everything into small services/applications that are only concerned about one little thing, and they do that &lt;em&gt;very well&lt;/em&gt;. This is, by the way, also one the keys of greater &lt;a href=&#34;https://www.marcotroisi.com/productive-programmer-5-tips/&#34;&gt;productivity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: have you already tried to build a Microservice, or even an entire application based on a Microservices architecture? I would love to have a look and learn from you as well. Share your work on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=https://www.marcotroisi.com/an-example-of-a-microservice/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=https://www.marcotroisi.com/an-example-of-a-microservice/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=http://goo.gl/KdOum9&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My Two Cents on Go</title>
      <link>https://www.marcotroisi.com/my-two-cents-on-golang/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/my-two-cents-on-golang/</guid>
      <description>&lt;p&gt;I have recently been studying and trying &lt;a href=&#34;http://www.golang.org&#34;&gt;Go&lt;/a&gt; (Golang), a statically typed language developed by Google, which promises really fast execution times and a pleasant development experience.&lt;/p&gt;

&lt;p&gt;I must say, it is pleasant to use indeed. And quite simple to learn. But it does also demolish some of the things that, coming from other languages, you might be giving for granted. While trying to get my head around it, it felt a lot like when I was trying to learn proper Javascript (i.e. &lt;em&gt;beyond&lt;/em&gt; jQuery), that is, it can sometimes take a while to understand, but then at one point something &amp;#8216;clicks&amp;#8217;, and immediately everything becomes so clear and easy. You do not end up necessarily thinking that it is &lt;em&gt;the best language ever&lt;/em&gt;, but you do come to appreciate its design choices. &lt;/p&gt;

&lt;p&gt;And it is easy to use, no doubt about that.&lt;/p&gt;

&lt;p&gt;Just for the sake of fun, I was inspired by &lt;a href=&#34;http://avelino.xxx/2014/03/golang-c-and-python-the-benchmark-time&#34;&gt;this article&lt;/a&gt; by Thiago Avelino to try doing the same benchmark comparison between PHP and Go.&lt;/p&gt;

&lt;p&gt;Not only does it feel so easy and natural to &amp;#8216;&lt;em&gt;port&lt;/em&gt;&amp;#8216; code from PHP to Go, but the difference in terms of execution times is quite remarkable (granted, this is a very simple test, and I do not need to tell you that you should not base your choice of a programming language on it).&lt;/p&gt;

&lt;p&gt;So, the following is the script in PHP:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function fact($n){
    if($n===0)return 1;
    return $n*fact($n-1);
}

function calc(){
    $t = 0;
    for($i=0; $i&amp;lt;100000; $i++){
        for($j=0; $j&amp;lt;8; $j++){
            $t += fact($j);
        }
    }
    return $t;
}

$result = calc();
echo $result.&amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this is the result of the benchmark:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;time php factorial.php
591400000

real    0m0.658s
user    0m0.488s
sys 0m0.004s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following, instead, is the Go code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {

    result := calc()
    fmt.Println(result)
}

func fact(n int) int {
    if n == 0 {
        return 1
    }

    return n * fact(n-1)
}

func calc() int {
    t := 0
    for i := 0; i &amp;lt; 100000; i++ {
        for j := 0; j &amp;lt; 8; j++ {
            t += fact(j)
        }
    }

    return t
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and here is the benchmark result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;time go run factorial.go
591400000

real    0m0.156s
user    0m0.138s
sys 0m0.021s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go is remarkably faster, while being frankly pretty easy to write. I have come to appreciate this language more and more, and I would wholeheartedly suggest to any PHP/Ruby/Python developer to add this nice, simple and fast language to his own skills. Learning more programming languages always ultimately make you a better developer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to use Fat Free framework from the command line</title>
      <link>https://www.marcotroisi.com/how-to-use-fat-free-framework-from-the-command-line/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/how-to-use-fat-free-framework-from-the-command-line/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Every good framework should allow you to easily create/execute commands from the &lt;a href=&#34;http://en.wikipedia.org/wiki/Command-line_interface&#34; title=&#34;command line&#34;&gt;command line&lt;/a&gt; (also called &lt;em&gt;shell&lt;/em&gt; or &lt;em&gt;terminal&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The command line is incredibly helpful and in some cases (e.g. when executing &lt;em&gt;cron jobs&lt;/em&gt; or particularly big scripts that make extensive use of your server&amp;#8217;s resources) simply unavoidable.&lt;/p&gt;

&lt;p&gt;This tutorial will show you how to execute your scripts using the command line and work with a standard Fat Free application to illustrate them. It assumes then that you already have Fat Free framework installed and working on your server. If you don&amp;#8217;t know how to do this, please refer to an &lt;a href=&#34;https://www.digitalocean.com/community/articles/how-to-use-the-fat-free-php-framework&#34;&gt;earlier tutorial&lt;/a&gt; that I have written for &lt;a href=&#34;http://www.digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, while executing commands from the command line with Fat Free framework is fairly easy, it is not very well documented and you might find yourself in trouble if you need to use that functionality.&lt;/p&gt;

&lt;h2 id=&#34;set-up-your-commands&#34;&gt;Set up your commands&lt;/h2&gt;

&lt;p&gt;To set up your command, create a new route in your application&amp;#8217;s bootstrap page (if you have followed the &amp;#8220;set up&amp;#8221; &lt;a href=&#34;https://www.digitalocean.com/community/articles/how-to-use-the-fat-free-php-framework&#34;&gt;tutorial&lt;/a&gt;, then it should be &lt;code&gt;index.php&lt;/code&gt;). To do that, just add a new routing directive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$f3-&amp;gt;route(&#39;GET /command&#39;, function($f3) {
    echo &amp;quot;Here our command starts&amp;quot;.PHP_EOL;
    // lots of operations here
    echo &amp;quot;Done! Be proud!&amp;quot;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to be sure that your command will only be executed through the command line, then the &lt;strong&gt;&lt;a href=&#34;http://www.php.net/manual/en/reserved.constants.php&#34;&gt;PHP_SAPI&lt;/a&gt;&lt;/strong&gt; function will be a life-saver for you (this is function that returns the type of interface in use between PHP and the web server). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$f3-&amp;gt;route(&#39;GET /command&#39;, function($f3) {
    if(php_sapi_name() == &amp;quot;cli&amp;quot;) {
        //In cli-mode = the interface in use is the command line (cli)
        echo &amp;quot;Here our command starts&amp;quot;.PHP_EOL;
        // lots of operations here
        echo &amp;quot;Done! Be proud!&amp;quot;;
    } else {
        //Not in cli-mode
        echo &amp;quot;You&#39;re not allowed to execute this operation&amp;quot;;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;execute-your-command&#34;&gt;Execute your command&lt;/h2&gt;

&lt;p&gt;And now comes the fun part. In order to execute the command that you have just set up, open a terminal application and write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /your/application/path // go to the directory where Fat Free is installed
php index.php &amp;quot;/command&amp;quot; // execute your command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, if there are no errors in your code, you should see the output of your command on screen.&lt;/p&gt;

&lt;p&gt;You might of course sometimes need to save the output somewhere, so that you may check it at any time, especially if you execute your command as a cron job.&lt;/p&gt;

&lt;p&gt;If that is the case, then write this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php index.php &amp;quot;/command&amp;quot; &amp;gt; /path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;h3 id=&#34;server-variables&#34;&gt;Server variables&lt;/h3&gt;

&lt;p&gt;You might encounter issues with Web server-related functions and variables in your code (e.g. &lt;code&gt;$_SERVER[&#39;HTTP_HOST&#39;]&lt;/code&gt;), which will inevitably return an error, since the command line won&amp;#8217;t recognize them. Here is where the &lt;strong&gt;&lt;a href=&#34;http://www.php.net/manual/en/reserved.constants.php&#34;&gt;PHP_SAPI&lt;/a&gt;&lt;/strong&gt; function could turn out to be extremely valuable, as it will allow you to detect whether your code is being executed by a web server or through the command line. This is what you might want to write to avoid this type of error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$http_host = (php_sapi_name() == &amp;quot;cli&amp;quot;) ? &amp;quot;cli&amp;quot; : $_SERVER[&#39;HTTP_HOST&#39;];
echo $http_host;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $_SERVER[&#39;HTTP_HOST&#39;]; // this will not work on the command line
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;paths&#34;&gt;Paths&lt;/h3&gt;

&lt;p&gt;Also, the command line will not recognize relative paths within your PHP code. So, be sure to always use the absolute path when you, for instance, handle a file. A path that looks like &lt;code&gt;/files/log/log.txt&lt;/code&gt; will then have to become something like &lt;code&gt;/var/www/html/thisismyapp.ie/files/log/log.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you have seen, using the command line with a framework like Fat Free is easy and does not imply changing a lot of things in your code. That means that you can easily call the same functions from both browser and command line, which makes your life easier (whereas with some other frameworks you have to put your commands in a different place, which means additional work).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WordPress and Ghost: a CMS vs a blogging platform</title>
      <link>https://www.marcotroisi.com/wordpress-and-ghost/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/wordpress-and-ghost/</guid>
      <description>&lt;p&gt;I am definitely amongst the growing group of developers that are fascinated and thrilled by &lt;a href=&#34;http://www.nodejs.org&#34;&gt;node.js&lt;/a&gt;, its thriving community, its being simple yet powerful, super-fast and scalable.&lt;/p&gt;

&lt;p&gt;Although my main language remains &lt;a href=&#34;http://www.php.net&#34;&gt;PHP&lt;/a&gt; (mostly because my employer wants me to work with it, but also because of its enormous libraries collection and its maturity as a language for the web), I can undoubtedly see a future with most of the cool apps out there being developed with node.js. I am convinced that, should I start a new project of my own today, a project that I believed would conquer the market, I would totally go for a lightweight HTML5 + CSS3 + JS (with the help of &lt;a href=&#34;http://www.angularjs.org&#34;&gt;Angular.js&lt;/a&gt;) interface backed by a powerful node.js (with &lt;a href=&#34;http://www.expressjs.com&#34;&gt;express.js&lt;/a&gt;)-based API.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So when I came to know about this new, elegant and lightweight blogging platform named &lt;a href=&#34;http://www.ghost.org&#34;&gt;Ghost&lt;/a&gt; and based on node.js I was more than happy and I thought it was just what we needed to be &lt;em&gt;finally&lt;/em&gt; set free from WordPress! But I then worked out that I was almost surely wrong.&lt;/p&gt;

&lt;h2 id=&#34;wordpress-is-a-cms-not-a-blogging-platform&#34;&gt;WordPress is a CMS, not a blogging platform&lt;/h2&gt;

&lt;p&gt;While it still remains the best blogging platform out there, as of today &lt;a href=&#34;http://www.wordpress.org&#34;&gt;WordPress&lt;/a&gt; is a fully fledged CMS and, in my opinion, it&amp;#8217;s the best CMS you might desire. It&amp;#8217;s simple enough to use and it&amp;#8217;s got so many &lt;a href=&#34;http://wordpress.org/plugins/&#34;&gt;plugins and extensions&lt;/a&gt; that to call it an ecosystem wouldn&amp;#8217;t mean overrating it. And, to be fair, the fact that it&amp;#8217;s based on PHP means that it can run virtually everywhere with the minimum effort required.&lt;/p&gt;

&lt;h2 id=&#34;ghost-is-what-it-claims-to-be-just-a-blogging-platform&#34;&gt;Ghost is what it claims to be: &lt;em&gt;just a blogging platform&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Ghost is beautiful, easy to use and it&amp;#8217;s got everything in the right place. The dashboard is right the one that you would love to have in your WordPress blog. And it&amp;#8217;s seriously fast, and you would expect that since it&amp;#8217;s built on node.js. But it&amp;#8217;s limited to blogging and they (&lt;a href=&#34;https://ghost.org/about/&#34;&gt;the developers&lt;/a&gt;) want it to be so. That&amp;#8217;s great indeed, but it means that you have to be sure that your blog will always be just a blog, nothing more. And you&amp;#8217;ve got to know that, apart from the pleasure of a great platform for writing, you&amp;#8217;re not going to have a lot more in terms of functionalities and extensions. Of course they&amp;#8217;ll come in the future, but we can easily say that in the foreseeable future they won&amp;#8217;t be as many as WordPress.&lt;/p&gt;

&lt;h2 id=&#34;conclusion-verdict&#34;&gt;Conclusion/Verdict&lt;/h2&gt;

&lt;p&gt;They&amp;#8217;re both great platforms, WordPress being a lot more mature, Ghost being still in its infancy. Just don&amp;#8217;t think of them as one replacing the other. They do different things, and they both work. Decide &lt;em&gt;what your website is gonna be about&lt;/em&gt; and then pick the right platform for you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Waiting for ‘The Yii Book’</title>
      <link>https://www.marcotroisi.com/waiting-for-the-yii-book/</link>
      <pubDate>Sat, 27 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/waiting-for-the-yii-book/</guid>
      <description>&lt;p&gt;It&amp;#8217;s about a month ago that I came to know that &lt;a href=&#34;http://www.larryullman.com&#34; target=&#34;_blank&#34;&gt;Larry Ullman&lt;/a&gt;, a web programmer and writer of wonderful tutorials/books, was about to write a &lt;a href=&#34;http://www.larryullman.com/2012/09/12/yii-2-and-the-yii-book/&#34; target=&#34;_blank&#34;&gt;new book&lt;/a&gt; on the &lt;a href=&#34;http://www.yiiframework.com&#34; target=&#34;_blank&#34;&gt;Yii framework&lt;/a&gt;, my favourite PHP framework at all.&lt;/p&gt;

&lt;p&gt;While there&amp;#8217;s no doubt I will be one of the firsts to buy it, I suggest to everyone interested in (and/or actually involved with) programming with PHP and using a framework to make your webapps more stable, simple to keep updated (especially if you work with a team) and stable, to read Larry&amp;#8217;s incredibly clear and well written &amp;#8220;&lt;a href=&#34;http://www.larryullman.com/series/learning-the-yii-framework/&#34; target=&#34;_blank&#34;&gt;Learning Yii framework&lt;/a&gt;&amp;#8221; series on his blog. Should you like it, you may consider to buy his next to be published book.&lt;/p&gt;

&lt;p&gt;The Yii framework was created by Qiang Xue, a developer previously involved in the Prado framework. _«Yii is a free, open-source Web application development framework written in PHP5 that promotes clean, &lt;a href=&#34;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; rel=&#34;nofollow&#34;&gt;DRY&lt;/a&gt; design and encourages rapid development. It works to streamline your application development and helps to ensure an extremely efficient, extensible, and maintainable end product.»_ (source: &lt;a href=&#34;http://www.yiiframework.com/about/&#34; target=&#34;_blank&#34;&gt;yiiframework.com/about/&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;other-books-on-php-from-larry-ullman&#34;&gt;Other books on PHP from Larry Ullman:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/gp/product/0321784073/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0321784073&amp;amp;linkCode=as2&amp;amp;tag=marctroi07-21&#34;&gt;PHP and MySQL for Dynamic Web Sites: Visual QuickPro Guide (Visual QuickPro Guides)&lt;/a&gt;&lt;img style=&#34;border: none !important; margin: 0px !important;&#34; alt=&#34;&#34; src=&#34;http://ir-uk.amazon-adsystem.com/e/ir?t=marctroi07-21&amp;l=as2&amp;o=2&amp;a=0321784073&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/gp/product/B0099RT7JA/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=B0099RT7JA&amp;amp;linkCode=as2&amp;amp;tag=marctroi07-21&#34;&gt;PHP Advanced and Object-Oriented Programming: Visual QuickPro Guide&lt;/a&gt;&lt;img style=&#34;border: none !important; margin: 0px !important;&#34; alt=&#34;&#34; src=&#34;http://ir-uk.amazon-adsystem.com/e/ir?t=marctroi07-21&amp;l=as2&amp;o=2&amp;a=B0099RT7JA&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/gp/product/0321656229/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0321656229&amp;amp;linkCode=as2&amp;amp;tag=marctroi07-21&#34;&gt;Effortless E-commerce with PHP and MySQL (Voices That Matter)&lt;/a&gt;&lt;img style=&#34;border: none !important; margin: 0px !important;&#34; alt=&#34;&#34; src=&#34;http://ir-uk.amazon-adsystem.com/e/ir?t=marctroi07-21&amp;l=as2&amp;o=2&amp;a=0321656229&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Yii: XML generator</title>
      <link>https://www.marcotroisi.com/xml-generator-yii-framework/</link>
      <pubDate>Sat, 27 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcotroisi.com/xml-generator-yii-framework/</guid>
      <description>&lt;p&gt;As I needed to create some custom XMLs for a project I am working on, I have created an Yii extension based on a nice class being developed by &lt;a href=&#34;http://simonwillison.net/&#34; target=&#34;_blank&#34;&gt;Simon Willison&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using this extension, everyone will be easily able to generate an XML. I am pretty sure there may be different and even more powerful approaches to do the same thing, but what I like of this extension is that it does make really simple to create a custom XML. And, sometimes, simple is better -especially when it means less time to do the same thing!&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;ve never used an extension with the Yii framework, you may find useful to read the &amp;#8216;extensions&amp;#8217; section on the Yii framework official website: &lt;a href=&#34;http://www.yiiframework.com/doc/guide/1.1/en/extension.overview&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.yiiframework.com/doc/guide/1.1/en/extension.overview&#34;&gt;http://www.yiiframework.com/doc/guide/1.1/en/extension.overview&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Download the &lt;a href=&#34;https://www.marcotroisi.com/wp-content/uploads/2012/10/XmlGenerator1.zip&#34;&gt;XmlGenerator&lt;/a&gt; (extension for Yii framework)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

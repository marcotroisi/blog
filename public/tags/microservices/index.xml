<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Troisi | technology, software development and productivity</title>
    <link>http://www.marcotroisi.com/tags/microservices/index.xml</link>
    <description>Recent content on Marco Troisi | technology, software development and productivity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Marco Troisi</copyright>
    <atom:link href="http://www.marcotroisi.com/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My tech predictions for 2017</title>
      <link>http://www.marcotroisi.com/tech-predictions-for-2017/</link>
      <pubDate>Tue, 03 Jan 2017 01:32:26 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/tech-predictions-for-2017/</guid>
      <description>

&lt;p&gt;We&amp;rsquo;re now a few days into the new year, and it&amp;rsquo;s probably a good time to look into what might or might not happen during the next 12 months.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a fun exercise, and of course I might be wrong about some or all of the following predictions. They&amp;rsquo;re based on my personal observations of what I see happening in the industry at the moment.&lt;/p&gt;

&lt;h2 id=&#34;1-apple&#34;&gt;#1: Apple&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Apple&lt;/strong&gt; is going to keep trying hard but it is unlikely to release anything truly useful and game-changing over the next year.&lt;/p&gt;

&lt;p&gt;As with the &lt;a href=&#34;http://www.apple.com/ie/macbook-pro/&#34;&gt;new MacBook Pro&lt;/a&gt; (the one with the touch bar), they&amp;rsquo;re going to keep releasing products that are only marginally better from a purely technological point of view, with nice and shiny features (like the abovementioned touch bar) that are &lt;a href=&#34;https://michaelhyatt.com/companies-forget-product.html&#34;&gt;driven by marketing&lt;/a&gt; and not an overall technological/product vision.&lt;/p&gt;

&lt;p&gt;Moreover, a &lt;a href=&#34;http://bgr.com/2016/10/28/macbook-pro-2016-specs-creative-professionals-developers/&#34;&gt;sense of discontent&lt;/a&gt; seems to be around, with people &lt;a href=&#34;https://twitter.com/spolsky/status/815250470843269120&#34;&gt;complaining&lt;/a&gt; and even &lt;a href=&#34;https://www.facebook.com/michaelhyatt/photos/a.10150425974849385.362668.133149524384/10154334024454385/?type=3&amp;amp;theater&#34;&gt;returning&lt;/a&gt; their brand new MacBook Pros.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also keep an eye on:&lt;/strong&gt; While 2017 might be too early, as an old Linux enthusiast I really hope someone will eventually come up with a Linux-based solution that can stand against MacBooks both in terms of hardware and software.&lt;/p&gt;

&lt;h2 id=&#34;2-docker&#34;&gt;#2: Docker&lt;/h2&gt;

&lt;p&gt;More tools are going to come up with the goal of making &lt;strong&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/strong&gt; easier to use. In particular, &lt;em&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;&lt;/em&gt; is going to become production-ready, and keeping Docker commands into Compose&amp;rsquo;s easy-to-read yaml files is going to become most developers&amp;rsquo; preferred way of running Docker apps, as opposed to having to remember huge, unreadable command line commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also keep an eye on:&lt;/strong&gt; CoreOS&amp;rsquo;s &lt;a href=&#34;https://coreos.com/rkt/&#34;&gt;rkt&lt;/a&gt; as a viable (and more secure) alternative to Docker.&lt;/p&gt;

&lt;h2 id=&#34;3-kubernetes-and-openshift&#34;&gt;#3: Kubernetes and Openshift&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;&lt;/strong&gt; is going to become the de-facto industry standard for container orchestration. At the same time, solutions like RedHat&amp;rsquo;s &lt;strong&gt;&lt;a href=&#34;https://www.openshift.com/&#34;&gt;OpenShift&lt;/a&gt;&lt;/strong&gt; are going to make it easier than ever to benefit from the enourmous power of Kubernetes. Currently, Kubernetes is already seen as the most complete solution, but relatively hard to setup and work with. With OpenShift reaching its more mature stage, small and big companies are going to look at it as a way to ease themselves into the world of Kubernetes and container orchestration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also keep an eye on:&lt;/strong&gt; &lt;a href=&#34;https://www.weave.works/solution/cloud/&#34;&gt;Weave.Cloud&lt;/a&gt; as another possible Kubernetes-based alternative to OpenShift. Weave offers an impressive set of tools that can be very helpful when building software with a microservices architecture.&lt;/p&gt;

&lt;h2 id=&#34;4-microservices&#34;&gt;#4: Microservices&lt;/h2&gt;

&lt;p&gt;As we move away from the hype of &lt;strong&gt;microservices&lt;/strong&gt; being the solution to all of humanity&amp;rsquo;s problems, there are going to be more people talking about when it&amp;rsquo;s &lt;em&gt;not&lt;/em&gt; a good idea to build software with a microservices architecture. At the same time, tools that help us manage a distributed architecture are going to reach a higher level of maturity, making it easier than ever before to work with microservices.&lt;/p&gt;

&lt;h2 id=&#34;5-ai&#34;&gt;#5: AI&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s going to be more clarity and (hopefully) less plugging around the topic of &lt;strong&gt;Artificial Intelligence&lt;/strong&gt;. As we realise that completely replacing humans may never be possible any time soon (if ever), more resources are going to be invested into smaller, practical projects and technologies that use the power of machines to actually make us more productive and improve our lives in meaningful ways.&lt;/p&gt;

&lt;p&gt;This is the sensible way to look at this topic. The purpose of software is to help us live better lives and achieve more and more efficiently. To think of software and, by extension, artificial intelligence only as ways of replacing humans isn&amp;rsquo;t helpful and isn&amp;rsquo;t going to get us anywhere.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I hope you enjoyed reading my personal predictions for 2017! I&amp;rsquo;d love to hear what your thoughts are and what you think we&amp;rsquo;ll see more (or less) of over the next year.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When to use microservices (video)</title>
      <link>http://www.marcotroisi.com/when-to-use-microservices-video/</link>
      <pubDate>Fri, 09 Sep 2016 08:05:54 +0100</pubDate>
      
      <guid>http://www.marcotroisi.com/when-to-use-microservices-video/</guid>
      <description>&lt;p&gt;A few weeks ago, after giving a talk at PHP Dublin, I was interviewed by the fine folks from the &lt;a href=&#34;https://uxdxconf.com/&#34;&gt;UXDX&lt;/a&gt; conference.&lt;/p&gt;

&lt;p&gt;The topic of the interview was &lt;strong&gt;&amp;ldquo;When to use microservices&amp;rdquo;&lt;/strong&gt;. It was partly inspired by the talk I gave that very night. In the interview, I do my best to define what microservices are and when should companies adopt them. I then proceed to give insights as to how to succeed from both a code quality and a project management point of view.&lt;/p&gt;

&lt;p&gt;UXDX is a conference that will run in Dublin, Ireland, on November the 2nd, 2016. The event&amp;rsquo;s goal is to &lt;em&gt;focus on improving the team behind the product&lt;/em&gt;. There will be a set of great speakers from some of the best companies in Ireland and not only. If you can go, you shouldn&amp;rsquo;t miss it. You can get your tickets &lt;a href=&#34;https://uxdxconf.com/#/tickets&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the video of the inteview. It&amp;rsquo;s less than 7 minutes long, but I think it contains some interesting points which you might want to look into.&lt;/p&gt;

&lt;div class=&#34;videoWrapper&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/MxdynUAGQGc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Direct link: &lt;a href=&#34;https://youtu.be/MxdynUAGQGc&#34;&gt;https://youtu.be/MxdynUAGQGc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have questions or comments regarding what I just said in this video? Feel free to &lt;a href=&#34;https://www.twitter.com/marcotroisi&#34;&gt;message me&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microservices won’t improve your code quality</title>
      <link>http://www.marcotroisi.com/microservices-wont-improve-your-code-quality/</link>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/microservices-wont-improve-your-code-quality/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;ve read some of my &lt;a href=&#34;http://www.marcotroisi.com/tag/microservices/&#34;&gt;previous posts&lt;/a&gt;, you&amp;rsquo;ll know that I&amp;rsquo;m fairly excited about microservices. No, I do not believe them to be the answer to all of software development problems, but yes, they can be &lt;em&gt;one of&lt;/em&gt; the answers to &lt;em&gt;some of&lt;/em&gt; the problems we face.&lt;/p&gt;

&lt;p&gt;I say that and I mean it. Who doesn&amp;rsquo;t want to be able to rewrite a critical part of an application in two weeks or less? Who doesn&amp;rsquo;t think it&amp;rsquo;s the best thing for a service to handle graciously a failure on the part of one of its components, rather than becoming entirely unavailable?&lt;/p&gt;

&lt;p&gt;Yes, microservices are a great thing.&lt;/p&gt;

&lt;p&gt;But we are professionals, and as such we can&amp;rsquo;t afford going after what&amp;rsquo;s &amp;#8220;cool&amp;#8221; in the industry without keeping track of the big picture.&lt;/p&gt;

&lt;h2 id=&#34;write-great-code-first&#34;&gt;Write great code first&lt;/h2&gt;

&lt;p&gt;Just as knowing how to count doesn&amp;rsquo;t make you a Mathematician, knowing how to write some code doesn&amp;rsquo;t make you a Programmer. I hope I don&amp;rsquo;t sound elitist or arrogant when I say that, but I am convinced that if we don&amp;rsquo;t take ourselves seriously, no one else will.&lt;/p&gt;

&lt;p&gt;Being a programmer means knowing the discipline of programming. It means being aware that every line of code you write today, will have a consequence in the lives of both the end user of your application, and other programmers that will successively work on that same piece of code.&lt;/p&gt;

&lt;p&gt;This is obviously not the right place to list all the things that you should be aware of while writing your code, but suffices to say that there are quite a few of them, and being careless about them is a clear indicator of how (un)seriously is one taking her job.&lt;/p&gt;

&lt;h2 id=&#34;what-you-need-to-know-before-you-start-with-microservices&#34;&gt;What you need to know before you start with microservices&lt;/h2&gt;

&lt;p&gt;Before you even begin to think about doing microservices, you need to get some facts straight:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The monolith is not bad per se&lt;/li&gt;
&lt;li&gt;Microservices don&amp;rsquo;t magically suspend the rules&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s have a closer look at them:&lt;/p&gt;

&lt;h3 id=&#34;the-monolith-is-not-bad-per-se&#34;&gt;The monolith is not bad per se&lt;/h3&gt;

&lt;p&gt;We are being sold this idea that monolithic software is messy, slow and evil. The code? Spaghetti without a doubt. But this is of course only true if you let it. Ideally, in a monolithic application that&amp;rsquo;s been developed following the basic principles of a clean architecture, and possibly using TDD, I see no reason why those bad things should be true.&lt;/p&gt;

&lt;h3 id=&#34;microservices-don-t-magically-suspend-the-rules&#34;&gt;Microservices don&amp;rsquo;t magically suspend the rules.&lt;/h3&gt;

&lt;p&gt;Say you know how to do your job well, and you&amp;rsquo;ve written perfectly clean monolithic application until now. You are told that microservices make the whole thing so much easier, and each component is so small that you don&amp;rsquo;t need to put the same amount of care into it. Is that true? No, it isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;That would be like &lt;em&gt;Pirelli&lt;/em&gt; thinking they don&amp;rsquo;t have to work as hard on their tyres as would a theoretical guy who is in charge of building the entire car by himself. After all a tyre is just a small part of a car, isn&amp;rsquo;t it? I mean, if anything breaks or if you need a different type of tyre, you quickly replace it.&lt;/p&gt;

&lt;p&gt;In the same way, one should feel justified to build the &lt;em&gt;Withdrawing&lt;/em&gt; component of a microservices-based Banking software in the most careless way! After all, if it stops working, if it becomes too slow, or if we simply don&amp;rsquo;t like it anymore, we can quickly rewrite it and replace it.&lt;/p&gt;

&lt;p&gt;I hope you can see that this is just nuts. No one thinks like that, in any industry, and neither should we. Pirelli would have their best engineers designing the safest, most performant tyres possible. They wouldn&amp;rsquo;t want a mistake on their part to compromise a car&amp;rsquo;s reliability. In the same way, each component of our microservices-based application needs to be something we can be proud of, that can potentially run for as long as possible unless a rewrite becomes necessary for reasons beyond our control.&lt;/p&gt;

&lt;p&gt;These days I&amp;rsquo;m hearing some people saying things like &amp;#8220;we keep our microservices so small, that we don&amp;rsquo;t even need to write tests!&amp;#8221; I&amp;rsquo;m confused. How does that even follow? Again, imagine the guy in charge of building brakes for cars, saying &amp;#8220;this is such a small part of the whole car, we don&amp;rsquo;t even need to test it!&amp;#8221; This makes no sense, and it&amp;rsquo;s simply unjustifiable.&lt;/p&gt;

&lt;h2 id=&#34;re-defining-microservices&#34;&gt;(Re)defining microservices&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Microservices are really more about the deployment strategy than anything else&lt;/em&gt;. As &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html&#34;&gt;suggested&lt;/a&gt; by &lt;em&gt;Uncle&lt;/em&gt; Bob Martin, if you build your application following what we know to be a clean architecture, the decision of whether to deploy everything into microservices or not is one that can be easily delayed to a later point. You don&amp;rsquo;t need to start building your software with microservices in mind. What you do need to keep in mind, is that your software will need to be clean and tested, at the very least.&lt;/p&gt;

&lt;p&gt;When you look at microservices this way, they become a lot less scary, and in a sense a lot of the hype around them goes away. Obviously, a microservice architecture remains a fantastic approach that I would highly suggest for a lot of use cases. But it&amp;rsquo;s not, in any way, a different approach to programming. It&amp;rsquo;s the same, clean, high quality code that you have (hopefully) been writing until now, now deployed and perhaps organised differently.&lt;/p&gt;

&lt;p&gt;Now, I am not saying that having a microservice architecture will not affect any of your design decisions. It will. But I am suggesting we don&amp;rsquo;t give it more credit than we should. I am saying that we should design the architecture of our application regardless of whether it will eventually be deployed into small microservices or not. And, by all means, let&amp;rsquo;s not allow the &lt;em&gt;small-ness&lt;/em&gt; of each microservice to suspend the rules of programming. No architectural choice is worth you giving up on being a professional.&lt;/p&gt;

&lt;p&gt;Microservices won&amp;rsquo;t improve your code quality. They won&amp;rsquo;t make it worse either. Really, it&amp;rsquo;s up to you, as it always was, and always will be.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Question about Microservices</title>
      <link>http://www.marcotroisi.com/questions-about-microservices/</link>
      <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/questions-about-microservices/</guid>
      <description>&lt;p&gt;I received this question about microservices, and I am happy to publish my reply. Perhaps someone else will also find it helpful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello Marco,&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve just stumbled upon your articles about microservices. I&amp;#8217;m really trying to get into it, I find it a really interesting approach when it comes to build web apps. I got bored with all those frameworks claiming MVC etc. What I want to focus on is SOC, so microservices really fits in there. However I didn&amp;#8217;t have time yet to practice what I could have read on that, and there are still things that are pretty obscure to me, maybe you could give me your point of view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My main concern is about information sharing between services. What happens when a microservice is &amp;#8220;linked&amp;#8221; to another one ? If I take your example of WordPress refactoring, you&amp;#8217;re for example stating that there could be a Post and Media Content microservices. But here, the media content microservices isn&amp;#8217;t really standalone as it wouldn&amp;#8217;t make sense to use it without the Post microservice, because Media Content is directly attached to a Post, see what I mean ? It sounds kind of weird to me, but maybe I&amp;#8217;m wrong.&lt;/p&gt;

&lt;p&gt;Also my second point would be about user authentication. How do you persist the state between microservices ? Do you have an example of that ?&lt;/p&gt;

&lt;p&gt;Thanks for the articles, Waiting to hear from you.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Romain&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Dear Romain,&lt;/p&gt;

&lt;p&gt;Thanks for reading my article on microservices, I appreciate it. Like you, I am also sick and tired of big, overbloated frameworks that claim to do everything for you, including making your coffee in the morning. While they may be a good choice in certain situations, I think many times they just add a lot of unnecessary complexity, unnecessary &lt;em&gt;ad hoc&lt;/em&gt; concepts to be learned, and most importantly, unnecessary (potentially buggy) code that you haven&amp;#8217;t written yourself. These days I find myself more inclined towards micro-frameworks, or even simple libraries that do just one thing; an example I love would be &lt;a href=&#34;http://www.gorillatoolkit.org/&#34;&gt;Gorilla&lt;/a&gt;, a Golang set of standalone libraries that take care of most of the functionalities for which we would have traditionally used a framework.&lt;/p&gt;

&lt;p&gt;As to your question, let me see if I can somehow help you here. When you say &amp;#8220;linked&amp;#8221;, I take it that you mean a microservice that&amp;#8217;s &lt;em&gt;usually&lt;/em&gt; (or, meant to be) used in conjunction with one or more other microservices. But that, when you think about it, is nothing strange! In fact, any microservice that would be meant to be only used on its own, would simply be a small monolith. For a microservice to be considered as such, it needs to be part of a &lt;strong&gt;microservices architecture&lt;/strong&gt;, that is to say, a bigger application that does a lot of things, and that uses microservices to do each one of those things.&lt;/p&gt;

&lt;p&gt;But I get where your doubt is coming from. You are thinking about the Media Content example, and it doesn&amp;#8217;t feel to you like a standalone service as it would never be used separately from the Post microservice. I see two main problems in this reasoning.&lt;/p&gt;

&lt;p&gt;Firstly, the idea of standalone-&lt;em&gt;ness&lt;/em&gt; in a microservices architecture is meant to be mostly for the sake of the application&amp;#8217;s solidity; in other words, you ought to think of the Post microservice as a standalone service not because you want to use it as such (in fact, you don&amp;#8217;t! You want to use it together with Media, and maybe other services), but because in the event where the Media microservice should be unavailable (e.g. due to a network problem), you don&amp;#8217;t want the entire application to be altogether down. What you want there, is for the Posts to be still available, even though you might have to gracefully handle the absence of pictures and videos.&lt;/p&gt;

&lt;p&gt;I hope this gives you the right perspective. The idea is that you build a microservice independently, and you test it on its own, so to make sure that it will keep working even when other services are unavailable. Then, you mix it with the other microservices.&lt;/p&gt;

&lt;p&gt;The second problem I see there is that, while I agree that Media will mostly be used in conjunction with the Post microservice, nevertheless you shouldn&amp;#8217;t think of them as &lt;em&gt;only&lt;/em&gt; usable together. If you keep things clean and separated, you will be better off in the future, as you never know what functionalities you are going to need as you move on. Think for example of a service that takes pictures from your Media microservice and send them to your Pinterest account using Pinterest&amp;#8217;s APIs. In this case, you don&amp;#8217;t really need the Post microservice, and it would be just one example of a situation where you need Media but you don&amp;#8217;t need Post. So the real point here is the &lt;em&gt;separation of concerns&lt;/em&gt;. Let each microservice do only one thing, and do it well. Let the Media microservice handle upload, resize, manipulation and what-have-you. Let the Post microservice handle the actual content and things like Markdown to HTML conversion (which could probably be another microservice anyway), and so on.&lt;/p&gt;

&lt;p&gt;Regarding your second question about authentication, I would advice you make use of a layer that will take care of receiving requests from the outside, handle the user authentication, and then route the request to the appropriate microservice (together with &lt;em&gt;at least&lt;/em&gt; a secret token, or something more sophisticated if you will), get the result from the microservice and send it back to user. Have a look at &lt;a href=&#34;https://getkong.org/&#34;&gt;Kong&lt;/a&gt; for a reference and a better idea of what I am talking about (warning: it might be overhead for certain projects, but just so you have an idea).&lt;/p&gt;

&lt;p&gt;Here are more resources for you, so you can go more in depth with these arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2015/08/06/let-the-magic-die.html&#34;&gt;Make the magic go away (Uncle Bob)&lt;/a&gt;, on the notion of not using overbloated frameworks!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1491950358/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1491950358&amp;amp;linkCode=as2&amp;amp;tag=marctroi-20&amp;amp;linkId=J656A6LG3XRMA3J4&#34;&gt;Building Microservices (Sam Newman)&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;#038;l=as2&amp;#038;o=1&amp;#038;a=1491950358&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://microservices.io/&#34;&gt;Microservices.io&lt;/a&gt;, lots of fine articles to give you a better overview of a microservices archicture, the good and the bad&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;Microservices guide (Martin Fowler)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techblog.netflix.com/2015/02/a-microscope-on-microservices.html&#34;&gt;Netflix and Microservices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wish you a lot of fun with microservices and your next project,&lt;/p&gt;

&lt;p&gt;Marco&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you&amp;#8217;d like to send me your questions or suggestions, feel free to &lt;a href=&#34;http://www.marcotroisi.com/contact/&#34;&gt;contact me&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hailo and their “Journey into Microservices”</title>
      <link>http://www.marcotroisi.com/hailo-journey-into-microservices/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/hailo-journey-into-microservices/</guid>
      <description>&lt;p&gt;A while ago, while looking for experiences of companies actually transitioning into a Microservice architecture, I stumbled upon this nicely written, real-world series of articles from &lt;a href=&#34;https://twitter.com/mattheath&#34;&gt;Matt Heath&lt;/a&gt;, published on the &lt;a href=&#34;http://www.hailoapp.com&#34;&gt;Hailo&lt;/a&gt; tech blog. The articles talk about their moving from a mostly-PHP, monolithic architecture, towards one based on Microservices.&lt;/p&gt;

&lt;p&gt;It is very interesting to read about the challenges of a company that started that everyone else, and then had to face the inevitable problems of scalability and code maintainability. It is also stimulating to see how they answered the questions almost everyone asks when trying to move into a Microservices architecture.&lt;/p&gt;

&lt;p&gt;If you are interested, read the articles, starting from the first one: &lt;a href=&#34;https://sudo.hailoapp.com/services/2015/03/09/journey-into-a-microservice-world-part-1/&#34;&gt;A Journey into Microservices&lt;/a&gt;, and then go ahead with &lt;a href=&#34;https://sudo.hailoapp.com/services/2015/03/09/journey-into-a-microservice-world-part-2/&#34;&gt;part two&lt;/a&gt; and &lt;a href=&#34;https://sudo.hailoapp.com/services/2015/03/09/journey-into-a-microservice-world-part-3/&#34;&gt;part three&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: have you worked on a transition to a microservice architecture? What has your experience been? Share your thoughts on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=http://www.marcotroisi.com/hailo-journey-into-microservices/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http://www.marcotroisi.com/hailo-journey-into-microservices/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=http://goo.gl/MB66xW&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Featured photo from the Hailo website&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An example of a Microservice</title>
      <link>http://www.marcotroisi.com/an-example-of-a-microservice/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/an-example-of-a-microservice/</guid>
      <description>&lt;p&gt;After writing on &lt;a href=&#34;http://www.marcotroisi.com/micro-services-a-quick-introduction/&#34;&gt;Microservices&lt;/a&gt;, I received a few feedbacks from people who found the topic fascinating but struggled to see how to effectively apply it in reality. So I decided to develop a little microservice, to use as a practical example. &lt;/p&gt;

&lt;h2 id=&#34;introducing-microtranslator&#34;&gt;Introducing MicroTranslator&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/marcotroisi/microtranslator&#34;&gt;MicroTranslator&lt;/a&gt;&lt;/strong&gt; is a microservice that I have built, which is supposed to handle locale and translations in an application. Its tech stack is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP &amp;gt;= 5.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fatfreeframework.com&#34;&gt;Fat Free framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mossphp/moss-locale&#34;&gt;Moss Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del datetime=&#34;2015-07-20T07:04:33+00:00&#34;&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; at the time of this writing (14 Apr &amp;#8217;15) I am still working on MicroTranslator. It will be production-ready (documentation included) in a few days. Sorry about that!&lt;/em&gt;&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&#34;it-comes-with-rest-api&#34;&gt;It comes with REST API&lt;/h2&gt;

&lt;p&gt;MicroTranslator provides simple-to-use REST API. For this reason, you need to know little to no PHP to use it. Simply fire up an instance of PHP on whatever machine you like, and then use the APIs to get the translations on the other Microservices that compose your application.&lt;/p&gt;

&lt;p&gt;Now this is important, in my opinion. It means that you can quickly begin working on your application without having to focus on a tedious task such as handling translations, but also that, at any point in time, you can completely get rid of it and rewrite it with, perhaps, a faster language. Or you can simply upgrade your hardware and keep relying on it.&lt;/p&gt;

&lt;h2 id=&#34;8220-i-could-have-done-this-myself-8221&#34;&gt;&amp;#8220;I could have done this myself&amp;#8221;&lt;/h2&gt;

&lt;p&gt;You may think now, &amp;#8220;why should I use your stuff when I can write my own translation manager, using the tools that I like the most?&amp;#8221; The simple answer here is &amp;#8220;You shouldn&amp;#8217;t (use my translation manager)!&amp;#8221;&lt;/p&gt;

&lt;p&gt;But I would also like to point out that, unless translations represent the core of your application, there is no reason why you would want to waste your time rewriting a library that does the same thing. But even if you do, what you should be avoiding is to tie it all up with the rest of your application. Using a Microservices architecture will allow you to &lt;em&gt;replace&lt;/em&gt; parts of your application quickly and seamlessly. And, it will give you the power of choosing the right tools, framework, database, etc for the task.&lt;/p&gt;

&lt;h2 id=&#34;point-by-point&#34;&gt;Point by point&lt;/h2&gt;

&lt;p&gt;Like I said, one of the reasons why I worked on MicroTranslator is because I wanted to create a real-life example out of my previous article on &lt;em&gt;what is a Microservice&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s have a look at the points I outlined back then:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;It is a Stand-alone service/application.&lt;/strong&gt;: Yes, MicroTranslator is stand-alone. It doesn&amp;#8217;t need, and actually, it doesn&amp;#8217;t want, to be included into your PHP application. You can connect to it, get and send to it all the data that you need, but you will not find MicroTranslator-specific code in your application. Just generic REST API calls.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is quick to (re)write.&lt;/strong&gt;: Absolutely! I wrote MicroTranslator in a weekend plus a few other free hours during the week. You can totally rewrite it in a week or less as soon as you feel like it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It focuses on one task&lt;/strong&gt;: It only cares about your translations. It doesn&amp;#8217;t even want to know how you use them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is Language-agnostic.&lt;/strong&gt;: Well, MicroTranslator is clearly written in PHP, but you can use its APIs from any application, regardless of the language/framework/tools you are using.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is aware of failures&lt;/strong&gt;. This clearly depends on the rest of the application. But, for example, you can cache the translations that you get from MicroTranslator, so that, should it be unreachable at a certain point in time, you can still handle the situation graciously. One thing is sure: if MicroTranslator goes down, it won&amp;#8217;t &lt;em&gt;directly&lt;/em&gt; affect your main application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;in-practice-it-8217-s-not-that-difficult&#34;&gt;In practice, it&amp;#8217;s not that difficult&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s amazing how simple things can look like when we see them in real-life examples. In fact, despite the buzzword-mania and all the hype around Microservices, something that we often fail to understand is how simple they are. Building a Microservice is as simple as a few days of work. Building an entire application based on a Microservices Architecture is as simple as being able to separate everything into small services/applications that are only concerned about one little thing, and they do that &lt;em&gt;very well&lt;/em&gt;. This is, by the way, also one the keys of greater &lt;a href=&#34;http://www.marcotroisi.com/productive-programmer-5-tips/&#34;&gt;productivity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: have you already tried to build a Microservice, or even an entire application based on a Microservices architecture? I would love to have a look and learn from you as well. Share your work on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=http://www.marcotroisi.com/an-example-of-a-microservice/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http://www.marcotroisi.com/an-example-of-a-microservice/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=http://goo.gl/KdOum9&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Microservices: A Quick Introduction</title>
      <link>http://www.marcotroisi.com/micro-services-a-quick-introduction/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/micro-services-a-quick-introduction/</guid>
      <description>&lt;p&gt;As I am in the middle of reading the excellent &lt;a href=&#34;http://amzn.to/1GIiYTb&#34;&gt;Building Microservices&lt;/a&gt; from Sam Newman, I thought I would spend some time de-mistyfying what &lt;strong&gt;Microservices&lt;/strong&gt; are, when/if are they needed and why.&lt;/p&gt;

&lt;p&gt;I am really grateful to this book, which I warmly recommend, for finally making the concept of Microservices so easy for me to understand, while never standing back from actually going into the difficulties of the practical world, with several real-life advices on how to make Microservices work in a modern architecture.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-microservice&#34;&gt;What is a Microservice&lt;/h2&gt;

&lt;p&gt;While you can find all sorts of amazingly technical explanations out there, Newman defines a Microservice in a strikingly simple way, which I am paraphrasing here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Microservice&lt;/strong&gt; is a stand-alone service that can be (re)built in no more than two weeks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For as silly and simplistic as this may sound, I think that it really gets to the heart of it. From here, you can totally go ahead talking about the best ways to implement this, but this is an exceptionally easy to remember &lt;em&gt;rule of thumb&lt;/em&gt; for all of us.&lt;/p&gt;

&lt;p&gt;So, what are the characteristics of a Microservice? I have outlined &lt;strong&gt;5 points&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;It is a Stand-alone service/application&lt;/strong&gt;. In other words, it is &lt;em&gt;not&lt;/em&gt; a good Microservice if it breaks when you change other parts of the application to which the Microservice itself depends on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is quick to (re)write&lt;/strong&gt;. As in the above definition, a two-weeks timeframe is a good general rule. If you can&amp;#8217;t possibly rewrite it from scratch in two weeks or less (yes, two weeks and a half are still fine!), then you may have designed this whole thing the wrong way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It focuses on one task&lt;/strong&gt;. Here the contrast with big, monolithic applications becomes more evident. If &lt;em&gt;WordPress&lt;/em&gt; were to be built on a Microservice architecture, you would have one independent, small application taking care of creating, editing and deleting &lt;em&gt;Posts&lt;/em&gt;, another one taking care of &lt;em&gt;Media Content&lt;/em&gt;, perhaps another one for generating &lt;em&gt;Static Pages&lt;/em&gt; and so on. You get the point. Compare this to the actual nature of &lt;em&gt;WordPress&lt;/em&gt;: a single, big platform which (potentially) does everything your mind can think of, and where, of course, any plugin could easily break the entire system (see Point #1).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is Language-agnostic&lt;/strong&gt;. Every Microservice will expose an API that is not dependent on the language, tools and technology used. And this is a big point in my opinion. What this means is that, for example, when building, say, a Blogging Platform, you would be entirely free to build each component with &lt;strong&gt;PHP&lt;/strong&gt; or &lt;strong&gt;Python&lt;/strong&gt;, privilege ease of development, except for your &lt;em&gt;Posts&lt;/em&gt; component, the most critical one, which you might just want to build with &lt;strong&gt;Java&lt;/strong&gt;, &lt;strong&gt;Go&lt;/strong&gt; or even &lt;strong&gt;C&lt;/strong&gt;, to make sure that performance is never an issue. And of course the same would apply for a &lt;em&gt;Database&lt;/em&gt; engine. &lt;strong&gt;Mongo&lt;/strong&gt; could be the perfect choice for &lt;em&gt;Posts&lt;/em&gt;, but &lt;strong&gt;Oracle&lt;/strong&gt; might be a better fit for your little &lt;em&gt;Store&lt;/em&gt; section where you sell your services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It knows that failures exist&lt;/strong&gt;. In a monolithic application, if anything fails, the whole thing is likely going to fail as well. With Microservices, you know that each one of them can possibly fail or just be unreachable at any time, and so you handle it in a gracious way, with no need to panic. In our theoretical Blogging Platform, if your &lt;em&gt;Media&lt;/em&gt; Microservice becomes unreachable because, say, the Database engine of choice has stopped working, there is zero-need for the whole application to crash. You can still minimise the impact and work on bringing &lt;em&gt;Media&lt;/em&gt; back to life without impacting everything else.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;why-using-microservices&#34;&gt;Why Using Microservices&lt;/h2&gt;

&lt;p&gt;Do you still need me to convince you? No, seriously, if you have been around in the Software Development world for a while, you have probably already realised, by reading the above listed points, what is the potential of using Microservices for your next application. Nevertheless, it is good to talk about it.&lt;/p&gt;

&lt;p&gt;This is why I think a Microservices Architecture brings more benefits than a monolithic one.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Best Performance/Ease of Development ratio&lt;/strong&gt;. This is an indirect one, but if you have read my points before, you already know why is this so. You can fine-tune each little part of your big application without penalising your whole Development process. You can be strategic. There is no need to build the whole application with Java and Postgres, when some less critical parts of it could easily be built with a quick and nice Python + Mongo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Small and focussed teams&lt;/strong&gt;. Instead of having a big group of developers all working on the same big project, you can have many small teams each one taking care of one or two Microservices. You can use different skills and capabilities in a more effective way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;. Oh my goodness, scalability. If you can rewrite each component in two weeks or less, scalability is no longer that big of an issue! No need for &lt;em&gt;premature optimisation&lt;/em&gt;. Is your blog finally getting the traffic you think it deserves? No problem, just &lt;strong&gt;rewrite&lt;/strong&gt; your &lt;em&gt;Posts&lt;/em&gt; Microservice in a faster language and/or increase the hardware capabilities &lt;strong&gt;only for that specific part&lt;/strong&gt;, and you are done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better Failure Management&lt;/strong&gt;. As outlined before, should a single Microservice fail for whatever reason, you can handle this graciously, and at the very least, you know that the rest of your application is not going to be affected.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It is not my goal here to give you the most complete explanation of what Microservices are (for that, I would suggest you read the &lt;a href=&#34;http://amzn.to/1GIiYTb&#34;&gt;above said book&lt;/a&gt;). Rather, I am only outlining what I think are some of the most important characteristics of a Microservice architecture, and why it might be a good idea for you to build your next application in that way.&lt;/p&gt;

&lt;p&gt;Are Microservices right for every situation? Of course not. But they appear to solve some problems that have been around for so long, that most of us consider to be pretty much unavoidable these days.&lt;/p&gt;

&lt;p&gt;Are you using Microservices or planning to use them? I would love to hear your opinion on the subject.&lt;/p&gt;

&lt;h2 id=&#34;other-resources&#34;&gt;Other resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/B00VJ3NP4A/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B00VJ3NP4A&amp;amp;linkCode=as2&amp;amp;tag=marctroi-20&amp;amp;linkId=5EGJ6QO6G66E6UHZ&#34;&gt;Microservices: Patterns and Applications: Designing fine-grained services by applying patterns&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;#038;l=as2&amp;#038;o=1&amp;#038;a=B00VJ3NP4A&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;Martin Fowler on Microservices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Troisi | technology, software development and productivity</title>
    <link>http://www.marcotroisi.com/index.xml</link>
    <description>Recent content on Marco Troisi | technology, software development and productivity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Marco Troisi</copyright>
    <lastBuildDate>Tue, 03 Jan 2017 01:32:26 +0000</lastBuildDate>
    <atom:link href="http://www.marcotroisi.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My tech predictions for 2017</title>
      <link>http://www.marcotroisi.com/tech-predictions-for-2017/</link>
      <pubDate>Tue, 03 Jan 2017 01:32:26 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/tech-predictions-for-2017/</guid>
      <description>

&lt;p&gt;We&amp;rsquo;re now a few days into the new year, and it&amp;rsquo;s probably a good time to look into what might or might not happen during the next 12 months.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a fun exercise, and of course I might be wrong about some or all of the following predictions. They&amp;rsquo;re based on my personal observations of what I see happening in the industry at the moment.&lt;/p&gt;

&lt;h2 id=&#34;1-apple&#34;&gt;#1: Apple&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Apple&lt;/strong&gt; is going to keep trying hard but it is unlikely to release anything truly useful and game-changing over the next year.&lt;/p&gt;

&lt;p&gt;As with the &lt;a href=&#34;http://www.apple.com/ie/macbook-pro/&#34;&gt;new MacBook Pro&lt;/a&gt; (the one with the touch bar), they&amp;rsquo;re going to keep releasing products that are only marginally better from a purely technological point of view, with nice and shiny features (like the abovementioned touch bar) that are &lt;a href=&#34;https://michaelhyatt.com/companies-forget-product.html&#34;&gt;driven by marketing&lt;/a&gt; and not an overall technological/product vision.&lt;/p&gt;

&lt;p&gt;Moreover, a &lt;a href=&#34;http://bgr.com/2016/10/28/macbook-pro-2016-specs-creative-professionals-developers/&#34;&gt;sense of discontent&lt;/a&gt; seems to be around, with people &lt;a href=&#34;https://twitter.com/spolsky/status/815250470843269120&#34;&gt;complaining&lt;/a&gt; and even &lt;a href=&#34;https://www.facebook.com/michaelhyatt/photos/a.10150425974849385.362668.133149524384/10154334024454385/?type=3&amp;amp;theater&#34;&gt;returning&lt;/a&gt; their brand new MacBook Pros.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also keep an eye on:&lt;/strong&gt; While 2017 might be too early, as an old Linux enthusiast I really hope someone will eventually come up with a Linux-based solution that can stand against MacBooks both in terms of hardware and software.&lt;/p&gt;

&lt;h2 id=&#34;2-docker&#34;&gt;#2: Docker&lt;/h2&gt;

&lt;p&gt;More tools are going to come up with the goal of making &lt;strong&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/strong&gt; easier to use. In particular, &lt;em&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;&lt;/em&gt; is going to become production-ready, and keeping Docker commands into Compose&amp;rsquo;s easy-to-read yaml files is going to become most developers&amp;rsquo; preferred way of running Docker apps, as opposed to having to remember huge, unreadable command line commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also keep an eye on:&lt;/strong&gt; CoreOS&amp;rsquo;s &lt;a href=&#34;https://coreos.com/rkt/&#34;&gt;rkt&lt;/a&gt; as a viable (and more secure) alternative to Docker.&lt;/p&gt;

&lt;h2 id=&#34;3-kubernetes-and-openshift&#34;&gt;#3: Kubernetes and Openshift&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;&lt;/strong&gt; is going to become the de-facto industry standard for container orchestration. At the same time, solutions like RedHat&amp;rsquo;s &lt;strong&gt;&lt;a href=&#34;https://www.openshift.com/&#34;&gt;OpenShift&lt;/a&gt;&lt;/strong&gt; are going to make it easier than ever to benefit from the enourmous power of Kubernetes. Currently, Kubernetes is already seen as the most complete solution, but relatively hard to setup and work with. With OpenShift reaching its more mature stage, small and big companies are going to look at it as a way to ease themselves into the world of Kubernetes and container orchestration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also keep an eye on:&lt;/strong&gt; &lt;a href=&#34;https://www.weave.works/solution/cloud/&#34;&gt;Weave.Cloud&lt;/a&gt; as another possible Kubernetes-based alternative to OpenShift. Weave offers an impressive set of tools that can be very helpful when building software with a microservices architecture.&lt;/p&gt;

&lt;h2 id=&#34;4-microservices&#34;&gt;#4: Microservices&lt;/h2&gt;

&lt;p&gt;As we move away from the hype of &lt;strong&gt;microservices&lt;/strong&gt; being the solution to all of humanity&amp;rsquo;s problems, there are going to be more people talking about when it&amp;rsquo;s &lt;em&gt;not&lt;/em&gt; a good idea to build software with a microservices architecture. At the same time, tools that help us manage a distributed architecture are going to reach a higher level of maturity, making it easier than ever before to work with microservices.&lt;/p&gt;

&lt;h2 id=&#34;5-ai&#34;&gt;#5: AI&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s going to be more clarity and (hopefully) less plugging around the topic of &lt;strong&gt;Artificial Intelligence&lt;/strong&gt;. As we realise that completely replacing humans may never be possible any time soon (if ever), more resources are going to be invested into smaller, practical projects and technologies that use the power of machines to actually make us more productive and improve our lives in meaningful ways.&lt;/p&gt;

&lt;p&gt;This is the sensible way to look at this topic. The purpose of software is to help us live better lives and achieve more and more efficiently. To think of software and, by extension, artificial intelligence only as ways of replacing humans isn&amp;rsquo;t helpful and isn&amp;rsquo;t going to get us anywhere.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I hope you enjoyed reading my personal predictions for 2017! I&amp;rsquo;d love to hear what your thoughts are and what you think we&amp;rsquo;ll see more (or less) of over the next year.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is object oriented programming dead? Not by a long shot</title>
      <link>http://www.marcotroisi.com/object-oriented-programming-is-not-dead/</link>
      <pubDate>Tue, 22 Nov 2016 08:16:23 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/object-oriented-programming-is-not-dead/</guid>
      <description>

&lt;p&gt;Is object-oriented programming (OOP) any good, really? If not, is it just plain bad, or are we simply not doing it right? Are OOP &lt;a href=&#34;http://techbeacon.com/13-programming-languages-defining-future-coding&#34;&gt;languages even in your future&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ve learned about OOP, and you&amp;rsquo;ve probably done it, or at least you think you have. You listened to other people tell you that it&amp;rsquo;s the right way—or the wrong way—to do things. You&amp;rsquo;ve spent long, excruciating hours listening to your computer science teacher talking about how &amp;ldquo;Toyota&amp;rdquo; inherits from &amp;ldquo;car,&amp;rdquo; and so on.&lt;/p&gt;

&lt;p&gt;In real life, though, you may not have found it useful. Perhaps you&amp;rsquo;ve worked with OOP languages, and at times it seemed more like a restriction than something that actually helps. Perhaps it has bothered you so much that you&amp;rsquo;ve welcomed the arrival of different and more modern paradigms.&lt;/p&gt;

&lt;p&gt;You probably identify with at least some of the above sentences. So you may be asking yourself:&lt;/p&gt;

&lt;h2 id=&#34;why-oop&#34;&gt;Why OOP?&lt;/h2&gt;

&lt;p&gt;I enjoy writing code in an object-oriented fashion. Thinking in terms of objects gives me a model that, when followed consistently,  produces code that is well organized, and easy to understand, test, and refactor.&lt;/p&gt;

&lt;p&gt;Some people argue that OOP doesn&amp;rsquo;t really work, or that you don&amp;rsquo;t need it to build modern software. But while I don&amp;rsquo;t think OOP is the ultimate paradigm, it is helpful. A bunch of procedural code, however nicely organized, is simply not the answer.&lt;/p&gt;

&lt;p&gt;But what about functional programming, you might say? That&amp;rsquo;s all fine and good. Many people say OOP and functional programming don&amp;rsquo;t &lt;em&gt;necessarily&lt;/em&gt; conflict with each other. In fact, they complement each other.&lt;/p&gt;

&lt;h2 id=&#34;understanding-oop-polymorphism-and-immutability&#34;&gt;Understanding OOP, polymorphism and immutability&lt;/h2&gt;

&lt;p&gt;Robert Martin has argued that the &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html&#34;&gt;biggest benefit you can take from OOP&lt;/a&gt; is polymorphism, the notion that you can define a single interface with multiple underlying implementations. As software engineers, we wouldn&amp;rsquo;t want to lose that. One of polymorphism&amp;rsquo;s many benefits is that lets you attain &lt;em&gt;inversion of dependency&lt;/em&gt;. In OOP, this means that &amp;ldquo;both high- and low-level objects must depend on the same abstraction,&amp;rdquo; according to Wikipedia. In practice, this translates into software components that are no longer highly coupled. Each component, both high-level and low-level ones, can be easily replaced.&lt;/p&gt;

&lt;p&gt;Martin further states that the biggest benefit you can take from functional programming is immutability, the idea that we design functions or objects so that they always return the same result, given the same values as parameters. Much has been said about this topic, and it&amp;rsquo;s apparent that its many advantages, such as code maintainability and lack of side effects, far outweigh possible downsides, such as a lack of flexibility of sort.&lt;/p&gt;

&lt;p&gt;It shouldn&amp;rsquo;t come as a surprise, then, that immutability has been a recurring theme among people who have done OOP for a while. In his book, Effective Java, Joshua Bloc says that &amp;ldquo;Classes should be immutable unless there&amp;rsquo;s a very good reason to make them mutable&amp;hellip; If a class cannot be made immutable, limit its mutability as much as possible.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yegor256.com/&#34;&gt;Yegor Bugayenko&lt;/a&gt;, CTO of teamed.io, is one of the strongest advocates of a return to pure OOP. He writes extensively about the &lt;a href=&#34;http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html&#34;&gt;advantages of immutability&lt;/a&gt;, saying that &amp;ldquo;&amp;hellip;all classes should be immutable in a perfect object-oriented world.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There is a lot more to it, and Yegor himself recently wrote a clarifying article, &amp;ldquo;&lt;a href=&#34;http://www.yegor256.com/2016/09/07/gradients-of-immutability.html&#34;&gt;Gradients of immutability&lt;/a&gt;,&amp;rdquo; where he explains how an immutable object doesn&amp;rsquo;t always need to have a rigid structure.&lt;/p&gt;

&lt;p&gt;This is a big topic, worthy of further study. But by now it should be clear that one good reason to do OOP is so you can retain polymorphism. Not only is that possible, but many people recommended it. While we do OOP, we should also hold on to as much immutability as possible, thereby bringing the single biggest advantage of functional programming into OOP.&lt;/p&gt;

&lt;p&gt;If we could get back to the primary advantages of OOP,  and get rid of all of the unnecessary ideas that have cluttered it to the point where most programmers have felt like OOP had become counterproductive, we could add more value to the way we write software.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll get back to what this type of stripped-down, or pure OOP, looks like in a minute. But the fact is that real OOP may look quite a bit different from the way you have understood it up to now.&lt;/p&gt;

&lt;p&gt;At this point, it&amp;rsquo;s worth asking the question: why objects? Why do we need to design programs as a number of objects, as opposed to functions, or procedures?&lt;/p&gt;

&lt;h2 id=&#34;use-objects-as-a-way-to-understand-the-world&#34;&gt;Use objects as a way to understand the world&lt;/h2&gt;

&lt;p&gt;David West, the author of &amp;ldquo;&lt;a href=&#34;http://amzn.to/2e4s5FM&#34;&gt;Object Thinking&lt;/a&gt;,&amp;rdquo; said in a recent &lt;a href=&#34;https://www.youtube.com/watch?v=bW5K5cJ-AVs&#34;&gt;interview&lt;/a&gt; that &amp;ldquo;You look at the world around you and you don&amp;rsquo;t see functions, but you see objects.&amp;rdquo; He&amp;rsquo;s on solid ground here: Philosophers have used terms like &lt;em&gt;abstract&lt;/em&gt; and &lt;em&gt;concrete objects&lt;/em&gt; to describe the world around them for a long time.&lt;/p&gt;

&lt;p&gt;Objects begin to make sense once we stop thinking in terms of bits and bytes, or lines of code. Thinking in terms of objects also lets us stop seeing ourselves as simply people who write code. Our job is really about solving problems, and finding meaningful ways to represent the domain in which we operate. It&amp;rsquo;s a completely different approach from the one that most people take when writing software. It&amp;rsquo;s the notion that &lt;a href=&#34;https://mitpress.mit.edu/sicp/full-text/sicp/book/node3.html&#34;&gt;&amp;ldquo;programs must be written for people to read, and only incidentally for machines to execute,&amp;rdquo;&lt;/a&gt; as Harold Abelson, Gerald Jay Sussman and Julie Sussman state in their book, &lt;em&gt;&lt;a href=&#34;https://mitpress.mit.edu/sicp/full-text/sicp/book/book.html&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Thinking in an object-orientated way is a great way to understand the problem you are trying to solve. It allows you to build software that is more maintainable, and easily understandable, for other people.&lt;/p&gt;

&lt;p&gt;By contrast, when you write code in a procedural way, you&amp;rsquo;re really putting yourself in the computer&amp;rsquo;s shoes, so to speak, and writing lines of code in the way it will eventually receive your commands anyway. That&amp;rsquo;s convenient, if you&amp;rsquo;re writing a quick 10-lines-long script, but less so if you&amp;rsquo;re building a complex system on which many programmers must work. Eventually, common sense says you should somehow organize this code into smaller chunks, each containing a different set of procedures (or functions) and representing a distinct domain of sort. In the end, hardly any of this will feel natural, or even logical.&lt;/p&gt;

&lt;p&gt;In this case, had the programmer originally designed the software in an object-oriented fashion, instead of having a lump of disorganized code, the software would be well structured and easy to understand. This isn’t necessarily a bad thing for the computer, as often code that&amp;rsquo;s well written and easy to understand is fast to execute, with less chance of memory leaks.&lt;/p&gt;

&lt;h2 id=&#34;the-source-of-all-that-oop-criticism&#34;&gt;The source of all that OOP criticism&lt;/h2&gt;

&lt;p&gt;The problem with a lot of the &lt;a href=&#34;https://mcollina.github.io/we-are-not-object-oriented-anymore/&#34;&gt;OOP criticism&lt;/a&gt; out there is that it tends to refer to things that in popular programmer culture have become associated with OOP, but shouldn&amp;rsquo;t be.&lt;/p&gt;

&lt;p&gt;One example is &lt;a href=&#34;http://marcotroisi.com/healthy-oop-object-oriented-programming/#orm-no-thanks&#34;&gt;object-relational mapping&lt;/a&gt; (ORMs). Truthfully, you could drop the &amp;ldquo;O&amp;rdquo; in this acronym, as there is no way to directly represent a relational database table in a real-world object. Then there&amp;rsquo;s &lt;a href=&#34;http://marcotroisi.com/healthy-oop-object-oriented-programming/#accessors-and-mutators-vs-useful-methods&#34;&gt;accessors and mutators&lt;/a&gt; (or &lt;a href=&#34;http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html&#34;&gt;getters and setters&lt;/a&gt;) as they will inevitably change the face of your object into a big &amp;ldquo;data bag,&amp;rdquo; throwing encapsulation and data abstraction out the window. The &lt;a href=&#34;http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html#2-he-works-by-contracts&#34;&gt;absence of interfaces&lt;/a&gt; is one of the main causes for tight coupling (or lack of flexibility) in our code. Finally, &lt;a href=&#34;http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html#5-his-class-doesn-39-t-have-anything-static&#34;&gt;static methods&lt;/a&gt; turn what may have started as an object into a big collection of functions, or procedures, which was never OOP&amp;rsquo;s purpose.&lt;/p&gt;

&lt;p&gt;Quite a few practices have somehow become part of our daily work but were never supposed to be found in OOP. In fact, using them takes us very far from truly object-oriented code. As a result, we lose out on many of the advantages we could have experienced.&lt;/p&gt;

&lt;p&gt;If you were to take a codebase and eliminate at least two of the above mentioned practices, the face of your code would experience a noticeable change for the better.&lt;/p&gt;

&lt;p&gt;OOP done well comes with a lot of benefits. But it&amp;rsquo;s absolutely necessary to remind ourselves what it is that OOP really is, and free ourselves from the many bad practices that have nothing to do with true object thinking.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This article was first published on &lt;a href=&#34;http://techbeacon.com/object-oriented-programming-dead-not-long-shot&#34;&gt;TechBeacon&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talks</title>
      <link>http://www.marcotroisi.com/talks/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/talks/</guid>
      <description>&lt;p&gt;This is a list of talks I&amp;rsquo;ve given so far:&lt;/p&gt;

&lt;p&gt;## 2017&lt;/p&gt;

&lt;p&gt;coming soon!!&lt;/p&gt;

&lt;p&gt;## 2016&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Debt is not a unicorn&lt;/strong&gt; - &lt;em&gt;Corkdev.io&lt;/em&gt;, Cork (Ireland); 19th July 2016 [&lt;a href=&#34;https://speakerdeck.com/marcotroisi/technical-debt-is-not-a-unicorn&#34;&gt;slides&lt;/a&gt;] [&lt;a href=&#34;https://www.youtube.com/watch?v=YiOuOybCTzI&#34;&gt;video&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microservices won&amp;rsquo;t improve your code quality&lt;/strong&gt; - &lt;em&gt;PHP Dublin&lt;/em&gt;, Dublin (Ireland); 11th August 2016 [&lt;a href=&#34;https://speakerdeck.com/marcotroisi/microservices-wont-improve-your-code-quality&#34;&gt;slides&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use microservices&lt;/strong&gt; - Video interview, Dublin (Ireland); 11th August 2016 [&lt;a href=&#34;https://www.youtube.com/watch?v=MxdynUAGQGc&#34;&gt;video&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Healthy OOP in Javascript&lt;/strong&gt; - &lt;em&gt;BelfastJS&lt;/em&gt;, Belfast (UK); 31st August 2016 [&lt;a href=&#34;https://speakerdeck.com/marcotroisi/healthy-oop-in-javascript&#34;&gt;slides&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mistakes made and Lessons learned (Panel)&lt;/strong&gt; - &lt;em&gt;PHP Dublin&lt;/em&gt;, Dublin (Ireland); 4th October 2016&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Would you like me to speak at your event/meetup/conference? Feel free to &lt;a href=&#34;http://www.marcotroisi.com/about/&#34;&gt;contact me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When to use microservices (video)</title>
      <link>http://www.marcotroisi.com/when-to-use-microservices-video/</link>
      <pubDate>Fri, 09 Sep 2016 08:05:54 +0100</pubDate>
      
      <guid>http://www.marcotroisi.com/when-to-use-microservices-video/</guid>
      <description>&lt;p&gt;A few weeks ago, after giving a talk at PHP Dublin, I was interviewed by the fine folks from the &lt;a href=&#34;https://uxdxconf.com/&#34;&gt;UXDX&lt;/a&gt; conference.&lt;/p&gt;

&lt;p&gt;The topic of the interview was &lt;strong&gt;&amp;ldquo;When to use microservices&amp;rdquo;&lt;/strong&gt;. It was partly inspired by the talk I gave that very night. In the interview, I do my best to define what microservices are and when should companies adopt them. I then proceed to give insights as to how to succeed from both a code quality and a project management point of view.&lt;/p&gt;

&lt;p&gt;UXDX is a conference that will run in Dublin, Ireland, on November the 2nd, 2016. The event&amp;rsquo;s goal is to &lt;em&gt;focus on improving the team behind the product&lt;/em&gt;. There will be a set of great speakers from some of the best companies in Ireland and not only. If you can go, you shouldn&amp;rsquo;t miss it. You can get your tickets &lt;a href=&#34;https://uxdxconf.com/#/tickets&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the video of the inteview. It&amp;rsquo;s less than 7 minutes long, but I think it contains some interesting points which you might want to look into.&lt;/p&gt;

&lt;div class=&#34;videoWrapper&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/MxdynUAGQGc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Direct link: &lt;a href=&#34;https://youtu.be/MxdynUAGQGc&#34;&gt;https://youtu.be/MxdynUAGQGc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have questions or comments regarding what I just said in this video? Feel free to &lt;a href=&#34;https://www.twitter.com/marcotroisi&#34;&gt;message me&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The right tools for the job</title>
      <link>http://www.marcotroisi.com/right-tools-for-programming/</link>
      <pubDate>Thu, 07 Jul 2016 20:32:31 +0100</pubDate>
      
      <guid>http://www.marcotroisi.com/right-tools-for-programming/</guid>
      <description>

&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#why-you-need-the-best-tools&#34;&gt;Why you need the best tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writing-code&#34;&gt;Writing code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#version-control&#34;&gt;Version Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-sharing-and-collaboration&#34;&gt;Code sharing and collaboration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-review&#34;&gt;Code review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bug-tracking&#34;&gt;Bug tracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#continuous-integration&#34;&gt;Continuous integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#static-analysers&#34;&gt;Static analysers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;&lt;a name=&#34;why-you-need-the-best-tools&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-you-need-the-best-tools&#34;&gt;Why you need the best tools&lt;/h2&gt;

&lt;p&gt;Hardly any job can be done without the right tools. You always need &lt;em&gt;something&lt;/em&gt; to do what you do. This applies to virtually everyone, from a dentist to a photographer, a journalist to a mathematician. And of course the software engineer is not excused.&lt;/p&gt;

&lt;p&gt;Give an old, cheap, faulty camera to a great photographer, and he&amp;rsquo;ll come back to you tired and frustrated, with only a few nice photos and more bad ones than what would be considered acceptable from a professional. Give a fantastic camera to a decent photographer who knows how to use it, and he&amp;rsquo;ll come back with loads of good photos, a few amazing ones, and perhaps a couple of not so great ones.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why I&amp;rsquo;m always amazed at how many software engineers and employers tend to overlook the importance of using the right tools. It&amp;rsquo;s simply astonishing. One reason for that, as I understand it, would be fragmentation, or &lt;em&gt;diversity of opinions&lt;/em&gt;. A developer might like a certain tool more than another one.&lt;/p&gt;

&lt;p&gt;But here&amp;rsquo;s where I think the controversy starts: it doesn&amp;rsquo;t really matter what you think is better. &lt;strong&gt;What&amp;rsquo;s better is what the industry decides it is&lt;/strong&gt;. Look at it this way: if you&amp;rsquo;re a photographer and you think the best way to take photos of your clients is on a 15-years-old Polaroid, does that make it the best tool for the job? I mean, your customers are paying you real money for professional, high-quality photos that they can not only print, but also store on their hard drives. And you give them a bunch of low quality photos printed from an old instant camera. Does this sound right to you? It doesn&amp;rsquo;t to me.&lt;/p&gt;

&lt;p&gt;In the same way, it wouldn&amp;rsquo;t matter how cool and geeky it makes you feel to work on a &lt;em&gt;Raspberry PI Model A&lt;/em&gt;. The truth is that you&amp;rsquo;re going to spend twice as much time doing what you have to do, because of the inherent slowness of such a small machine; plus you won&amp;rsquo;t have state-of-the-art tools to help you write code, test, debug and so on, because most development software isn&amp;rsquo;t yet supported on an ARM architecture.&lt;/p&gt;

&lt;p&gt;As a software engineer, I need to be an absolute professional in what I do. And I need to be in line with what the industry thinks are the best tools.&lt;/p&gt;

&lt;p&gt;These things may and will change in the future, but as things stand now, the industry seems to be saying the following things:&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;writing-code&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;writing-code&#34;&gt;Writing code&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;best way to write code&lt;/em&gt; is through a powerfully integrated IDE like the ones from JetBrains, or a faster text editor like Sublime Text or Atom, provided you have the right plugins for your language of choice installed. No, you can&amp;rsquo;t use Notepad, that&amp;rsquo;s just not good enough!&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;version-control&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;version-control&#34;&gt;Version Control&lt;/h2&gt;

&lt;p&gt;The industry is also saying that the &lt;em&gt;best version control system&lt;/em&gt; is &lt;strong&gt;Git&lt;/strong&gt;. It&amp;rsquo;s the system that the biggest number of companies and developers all around the world have found to be the most powerful one. While in terms of usage percentage it may still be fighting against SVN, a quick look at the projects that still use the latter will quickly reveal how the vast majority of them are only using it because of legacy. In other words, those are very old projects, and they were using SVN since before Git was even a thing. But then, why would they keep using such an ancient and inefficient system when there are plenty of ways to migrate to Git? This is something I don&amp;rsquo;t fully understand.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;code-sharing-and-collaboration&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;code-sharing-and-collaboration&#34;&gt;Code sharing and collaboration&lt;/h2&gt;

&lt;p&gt;Another thing the industry has been saying for a while now, is that the &lt;em&gt;best way to share code&lt;/em&gt; is to use &lt;strong&gt;GitHub&lt;/strong&gt; on top of the already-mentioned Git. Now, I understand that some companies may find that BitBucket or GitLab fit their needs better. But given the choice, and all things being equal, GitHub is &lt;em&gt;the&lt;/em&gt; one. It&amp;rsquo;s the most widely supported and most well known collaboration platform out there.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;code-review&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;code-review&#34;&gt;Code review&lt;/h2&gt;

&lt;p&gt;Tools for &lt;a href=&#34;http://marcotroisi.com/the-ethics-of-code-reviews/&#34;&gt;Code reviewing&lt;/a&gt; are also important, and they are strictly related to collaboration tools in that the &lt;em&gt;best way to review&lt;/em&gt; your peers&amp;rsquo; code appears to be yet again &lt;strong&gt;GitHub&lt;/strong&gt;. Their code reviewing tool is just too good, and it&amp;rsquo;s simply too easy to use when you&amp;rsquo;re already on GitHub, so there&amp;rsquo;s just no need to be looking for anything else.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;bug-tracking&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;bug-tracking&#34;&gt;Bug tracking&lt;/h2&gt;

&lt;p&gt;For a project to work well, you&amp;rsquo;re going to need some kind of bug tracking system. I&amp;rsquo;ve personally had to work with several of them, from &lt;a href=&#34;http://www.redmine.org/&#34;&gt;Redmine&lt;/a&gt; to &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt;, from &lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;Jira&lt;/a&gt; to &lt;a href=&#34;https://www.jetbrains.com/youtrack/&#34;&gt;YouTrack&lt;/a&gt;, and of course GitHub Issues. Here I&amp;rsquo;d have to say that I&amp;rsquo;ve had decent experiences with pretty much all of them: once you get used to one of them, they can all do their job, no question about it. But there seems to be a general consensus on &lt;strong&gt;Jira&lt;/strong&gt; being the best tool out there, and I think that&amp;rsquo;s right. While every other platform I&amp;rsquo;ve used was good enough, every time that I come back to Jira after a while, I am just amazed at how powerful and functional it is. And, every time I use a different tool after having worked with Jira for a while, it always takes me a while to adapt and a good dose of resignation at knowing that I&amp;rsquo;ll be missing some Jira&amp;rsquo;s unique features.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;continuous-integration&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;continuous-integration&#34;&gt;Continuous integration&lt;/h2&gt;

&lt;p&gt;Continuous integration is another critical topic. Here, what the industry appears to be saying is that &lt;a href=&#34;https://www.thoughtworks.com/continuous-integration&#34;&gt;you need to do it&lt;/a&gt;. There is no point in looking at tools here if one doesn&amp;rsquo;t even believe in the usefulness of doing Continuous integration. It will make it incredibly easier for you to keep track of what is going on, and to find bugs before they get deployed on production. As far as tools go, no longer that a few years ago the only viable option was to set up Jenkins on some server of yours, and spend days trying to make it work, not to mention the fact that someone will have to keep an eye on it because something might always break. This problem has now been largely solved by the emergence of many excellent, cloud-based CI platform. Prices are pretty fair, usually free for open source and in some cases free for small private projects as well. The most complete, well documented and most supported of them is undoubtedly Berlin-based &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travis&lt;/a&gt;. Recently, &lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt; has also attracted a lot of attention, mostly because it&amp;rsquo;s very fast, and because it&amp;rsquo;s free for small projects (i.e. if you only run one build at a time). I haven&amp;rsquo;t found their documentation to be outstanding, and there&amp;rsquo;s not (yet) much help to be found online, but with a bit of effort I&amp;rsquo;ve always been able to make it work nicely.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;static-analysers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;static-analysers&#34;&gt;Static analysers&lt;/h2&gt;

&lt;p&gt;Something else that you should make sure to have in your stack at some point: static analysers. These tools, while obviously far from replacing the need for writing clean code on the side of the programmer, are very helpful in pointing out a lot of code smells, therefore helping immensely especially during (or before) the process of code reviewing. Here things may change based on the language you&amp;rsquo;re using. &lt;a href=&#34;https://codeclimate.com/&#34;&gt;CodeClimate&lt;/a&gt; supports a lot of languages, and it&amp;rsquo;s probably the one you want to go for in many cases. Being open source, you can either download it and use it from your command line, or pay for the cloud version, which offers a nice UI and it&amp;rsquo;s perhaps a better deal overall. I&amp;rsquo;m also a big fan of &lt;a href=&#34;https://scrutinizer-ci.com/&#34;&gt;Scrutinizer&lt;/a&gt;, but it supports only a limited number of languages. The best way to make static analysers part of your development process, is to add it to your GitHub build. This allows you to check in real time, as you create a Pull Request, the quality of code you&amp;rsquo;re trying to push to the master branch. Moreover, you can make this even stricter by using GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/articles/about-protected-branches/&#34;&gt;Protected Branches&lt;/a&gt; feature, and disallowing you and your collaborators from merging into the master branch unless a certain level of quality has been reached.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&#34;conclusion&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While it&amp;rsquo;s totally understandable that from time to time it might not be possible for someone to follow the above guidelines in their entirety, it&amp;rsquo;s probably worth it to &lt;strong&gt;ask yourself&lt;/strong&gt; if there are good reasons for not following them. If there aren&amp;rsquo;t, then it&amp;rsquo;s definitely time to consider implementing some change.&lt;/p&gt;

&lt;p&gt;As a software engineer, there&amp;rsquo;s no reason to be left behind by the industry and, most importantly, not to use the right tools to deliver the best possible work. As a company, there&amp;rsquo;s no reason why you wouldn&amp;rsquo;t make it possible for your people to work with the best available tools, making both them and your customers happier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Healthy OOP</title>
      <link>http://www.marcotroisi.com/healthy-oop-object-oriented-programming/</link>
      <pubDate>Mon, 23 May 2016 08:34:57 +0100</pubDate>
      
      <guid>http://www.marcotroisi.com/healthy-oop-object-oriented-programming/</guid>
      <description>

&lt;p&gt;I enjoy writing code in an Object Oriented fashion. Thinking in terms of objects gives me
a model that, when followed consistently, ends up producing code that is well organised,
and that I know to be relatively easy to understand, test, and refactor.&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&#34;https://mcollina.github.io/we-are-not-object-oriented-anymore/&#34;&gt;some people&lt;/a&gt; would want to argue that OOP doesn&amp;rsquo;t really work and/or that we don&amp;rsquo;t need it anymore to build modern software. While I by no means think or want to say that OOP is the ultimate paradigm, I would definitely want to maintain that &lt;em&gt;it is&lt;/em&gt; helpful and that a bunch of procedural code, however &lt;em&gt;nicely&lt;/em&gt; organised (even if that means &lt;a href=&#34;http://marcotroisi.com/microservices-wont-improve-your-code-quality/&#34;&gt;microservices&lt;/a&gt;), &lt;em&gt;is not&lt;/em&gt; the answer.&lt;/p&gt;

&lt;p&gt;The problem with a lot of the criticism that OOP gets, is that it tends to refer to things that in popular programmer culture have become somehow associated with OOP (like the use of ORM), while that isn&amp;rsquo;t really the case.&lt;/p&gt;

&lt;p&gt;Object Oriented Programming &lt;em&gt;done well&lt;/em&gt;, or what I call &lt;strong&gt;Healthy OOP&lt;/strong&gt;, comes with a lot of benefits. Here&amp;rsquo;s a number of things everyone needs to know in order to write good quality code in an OOP way.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;orm-no-thanks&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;orm-no-thanks&#34;&gt;ORM? No, thanks&lt;/h2&gt;

&lt;p&gt;The main problem with using an ORM in an Object Oriented software is, to put it simply, that ORM-related code is overwhelmingly not Object Oriented. I am not saying it is bad per se, and I am not buying into &lt;a href=&#34;http://martinfowler.com/bliki/OrmHate.html&#34;&gt;Orm Hate&lt;/a&gt; just for the sake of it. But, at least if you&amp;rsquo;re trying to write good quality Object Oriented code, using an ORM is probably not the smartest choice out there.&lt;/p&gt;

&lt;p&gt;The biggest issue here is that when you use an ORM you are encouraged to create what you are told to be objects, and use them as &lt;em&gt;mappers&lt;/em&gt; to a database table (or collection). While this may sound very convenient
on paper, in practice it will inevitably lead you to create big classes, at least as big as your database tables.&lt;/p&gt;

&lt;p&gt;Not only that, but it will also encourage you to skip the &amp;ldquo;thinking&amp;rdquo; process, or the architectural side of things.
In other words, when all you have to do is to &lt;em&gt;replicate&lt;/em&gt; the exact same structure of your tables into classes (and please don&amp;rsquo;t make the mistake of thinking of them as objects, because they are not), and when most of this is
probably done for you by some sort of automated &lt;em&gt;table-to-class&lt;/em&gt; generator, then there is almost no point in which it makes sense to sit down and thinking through what&amp;rsquo;s the appropriate architecture and the best organisation for the software. You&amp;rsquo;re going to create a bunch of classes that represent your tables, and you&amp;rsquo;ll just work with them as they are.&lt;/p&gt;

&lt;p&gt;But database tables are meant to be relatively big collections of data, in a structured and easy-to-query fashion. There is very little correlation between that and your Objects, which are supposed to be kept small, cohesive, easy to extend, refactor and manipulate. Not to mention the need to keep your &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;&lt;em&gt;architecture clean&lt;/em&gt;&lt;/a&gt;, which won&amp;rsquo;t happen if you start tightening up your code with whichever database you&amp;rsquo;ve decided to use. It will eventually cause &lt;a href=&#34;http://marcotroisi.com/technical-debt-is-not-a-unicorn/&#34;&gt;technical debt&lt;/a&gt;, and that simply tells you something went wrong at an architectural decision level.&lt;/p&gt;

&lt;p&gt;So there is a case to be made against the use of ORMs in general, but even more so if you&amp;rsquo;re doing OOP.&lt;/p&gt;

&lt;p&gt;A note of clarification is due here: if you&amp;rsquo;re building software with a clean architecture, and you really, really want to use
an ORM, there may be a place for it, and that&amp;rsquo;s at the level of the &lt;em&gt;Interface Adapters&lt;/em&gt;, where you would build proper interfaces between your Objects (at the &lt;em&gt;Entities&lt;/em&gt; and &lt;em&gt;Use cases&lt;/em&gt; levels) and your ORM &amp;ldquo;mappers&amp;rdquo;. If you have no idea what I&amp;rsquo;m talking about here, please do yourself a favour and read Uncle Bob Martin&amp;rsquo;s article on &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;the clean architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, my favourite approach would be to build &lt;a href=&#34;http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html&#34;&gt;SQL-speaking Objects&lt;/a&gt;, as suggested by Yegor Bugayenko in both his blog and &lt;a href=&#34;http://amzn.to/1R0NSpg&#34;&gt;his latest book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At any rate, if you decide to go with an ORM, that&amp;rsquo;s entirely your prerogative, and it&amp;rsquo;s not wrong in itself. But make sure you&amp;rsquo;re building things in a &lt;em&gt;clean&lt;/em&gt; fashion, and don&amp;rsquo;t use the ORM-generated mappers as your main objects for your business logic.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;accessors-and-mutators-vs-useful-methods&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;accessors-and-mutators-vs-useful-methods&#34;&gt;Accessors and mutators vs useful methods&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Accessors&lt;/em&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Mutator_method&#34;&gt;&lt;em&gt;mutators&lt;/em&gt;&lt;/a&gt;,
also known as getters and setters, are incredibly popular today. Most IDEs will even automatically generate them for you, which make them even more tempting, as you can have them there and ready to use in just a few seconds.&lt;/p&gt;

&lt;p&gt;Why then take the time to think about more appropriate, expressive and useful methods? There are a few advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It makes your Object closer to a real-world entity.&lt;/strong&gt; &lt;code&gt;Email.enableAutoresponder()&lt;/code&gt; is simply a lot nicer and more expressive than &lt;code&gt;Email.setAutoresponder(true)&lt;/code&gt;, and it&amp;rsquo;s closer to how you would conceive that operation in the real world&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You don&amp;rsquo;t need to expose all of your internal variables.&lt;/strong&gt; What&amp;rsquo;s the point of having your variables as &lt;code&gt;private&lt;/code&gt; if you&amp;rsquo;re going to have setters and getters for all of them? You might as well have them all &lt;code&gt;public&lt;/code&gt;!
The reality is that you often don&amp;rsquo;t need to expose your variables to the outside world.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In OOP, it&amp;rsquo;s better to expose just a limited number of highly focussed and expressive methods, and handle everything else internally.&lt;/p&gt;

&lt;p&gt;As a representation of a real world entity, your object should be able to do more than just exposing a bunch of variables through getters and setters.&lt;/p&gt;

&lt;p&gt;Ultimately and probably the biggest benefit is that by following a more expressive approach you are always going to force yourself to think about the internal architecture of your object (as opposed to not delegating its functionalities to automatically generated getters and setters) by exposing only relevant information via nice and expressively named methods.&lt;/p&gt;

&lt;p&gt;A great approach to doing this is to first &lt;strong&gt;create an interface&lt;/strong&gt; where you would define all the methods that will be exposed by your object. Then, create your object, making it implement the interface you just defined, and then start filling those methods with actual functionalities, all the while writing your tests for the methods you are working on.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;real-world-entities-are-better-than-services&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;real-world-entities-are-better-than-services&#34;&gt;Real world entities are better than Services&lt;/h2&gt;

&lt;p&gt;This is a point that I keep coming back to: take the time to &lt;strong&gt;think about your objects&lt;/strong&gt; and the overall architecture.&lt;/p&gt;

&lt;p&gt;You should see your objects as &lt;strong&gt;real world entities&lt;/strong&gt;, rather than data structures, &amp;ldquo;helpers&amp;rdquo;, or &amp;ldquo;services&amp;rdquo;.
So, again, instead of replicating your database tables, think about real world examples that would make sense in your case, and expose real behaviour, rather than a bunch of accessors.&lt;/p&gt;

&lt;p&gt;Instead of building a &lt;code&gt;class PasswordEncrypter&lt;/code&gt; (or &lt;code&gt;class PasswordEncryptionService&lt;/code&gt;) that takes in passwords and encrypts them using the algorithm of choice, think in terms of small, more maintainable, composable and extendable objects.&lt;/p&gt;

&lt;p&gt;Why not defining a simple interface like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type EncryptedPasswordInterface interface {
  func encryptedValue() string;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then have simple, small classes implementing that interface to encrypt a given password using a certain algorithm.
Something like &lt;code&gt;Sha1EncryptedPassword&lt;/code&gt;. And then something like &lt;code&gt;Sha1EncryptedPasswordWithSalt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Following this approach, you&amp;rsquo;ll never end up with overbloated, ever-growing &amp;ldquo;Services&amp;rdquo;, which are really Do-it-all classes, a blatant violation of the &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The main point here is that you want to build in a way that always allows you to keep things small, composable, and breakable into smaller pieces. Your want your objects to be &lt;em&gt;very specific&lt;/em&gt; and single-focussed.&lt;/p&gt;

&lt;p&gt;The problem with a &lt;code&gt;PasswordEncrypter&lt;/code&gt; would have been that even if at the beginning it supported only one encryption algorithm, the number of such algorithms could have grown with time, and there would have been no obvious way to break things into smaller pieces.&lt;/p&gt;

&lt;p&gt;Notice that I am not saying that it couldn&amp;rsquo;t have been done, what I am saying is that there wouldn&amp;rsquo;t have been an obvious way to do it, which is after all my main point of contention with OOP: it&amp;rsquo;s a &lt;em&gt;system&lt;/em&gt; that gives you a more obvious way to consistently keep your code organised, easy to break into smaller pieces, easy to understand.&lt;/p&gt;

&lt;p&gt;In the example above, the real world entity is the &lt;em&gt;encrypted password&lt;/em&gt;, as defined by the initial interface. It is very easy to
imagine that this password could have been encrypted with as many encryption algorithms as you can think of, and all you need to do
is to have an object representing each one of those algorithms. Want to encrypt a password with an algorithm on top of another one? Create an object for it (probably the best approach), or do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;md5Password := NewMd5EncryptedPassword(unencryptedPassword);
encryptedPassword := NewSha1EncryptedPassword(md5Password.encryptedValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, &lt;code&gt;encryptedPassword&lt;/code&gt; will have double encryption, MD5 and SHA1. A different approach would be
to build a &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;decorator&lt;/a&gt;&lt;/em&gt;, which is an invaluable tool in OOP. It would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Constructor for Sha1PasswordFromMd5
func NewSha1PasswordFromEncrypted(md5EncryptedPassword *EncryptedPasswordInterface) (p *Sha1PasswordFromEncrypted) {
  return &amp;amp;Sha1PasswordFromEncrypted{md5EncryptedPassword};
}
// Sha1PasswordFromEncrypted is a decorator that takes as an argument
// EncryptedPasswordInterface and returns this value with Sha1 encryption
type Sha1PasswordFromEncrypted struct {
  var Md5EncryptedPassword *EncryptedPasswordInterface;
}
func (p *Sha1PasswordFromEncrypted) encryptedValue() string {
  // here encrypt Md5EncryptedPassword with sha1 and return value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, &lt;code&gt;Sha1PasswordFromEncrypted&lt;/code&gt; is a decorator that takes as a parameter an object that implements its very same interface,
&lt;code&gt;EncryptedPasswordInterface&lt;/code&gt;. It then applies Sha1 encryption on top of the already existing one, and returns the encrypted value as demanded by its interface.&lt;/p&gt;

&lt;p&gt;These are all examples of course, and you would have to use the best approach that works for what you&amp;rsquo;re trying to build.
But the main idea is to build objects as representations of real world (not necessarily physical) entities.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;use-interfaces&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-interfaces&#34;&gt;Use interfaces&lt;/h2&gt;

&lt;p&gt;Interfaces can be a controversial topic. Oddly enough, I&amp;rsquo;ve found myself having to justify the use of interfaces or making the case for them to other developers more often than it would have been reasonable.&lt;/p&gt;

&lt;p&gt;Unfortunately, some languages (see Javascript) don&amp;rsquo;t even come with first class support for interfaces (although the
excellent Typescript &lt;a href=&#34;http://www.typescriptlang.org/docs/handbook/interfaces.html&#34;&gt;does&lt;/a&gt;), whereas in some other languages,
like PHP, interfaces were a later addition and some developers don&amp;rsquo;t seem to have ever taken the time to study the matter
and understand what the use cases for them are. Golang has had support for interfaces since the beginning, and their use seems to be part of the language&amp;rsquo;s &lt;em&gt;ethos&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are many reasons to use interfaces. Personally, I tend to create an interface for virtually every object that I create.
This has several benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It allows me to define &lt;em&gt;what the object does&lt;/em&gt; without having yet to worry about actual implementation of functionalities and related tests&lt;/li&gt;
&lt;li&gt;It makes writing tests &lt;strong&gt;very easy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;By defining the &lt;em&gt;signature&lt;/em&gt; of an object, I&amp;rsquo;m forcing it to adhere to a &lt;strong&gt;contract&lt;/strong&gt; of sort, as my object&amp;rsquo;s public methods will all be described by a previously designed interface.&lt;/li&gt;
&lt;li&gt;It makes it easier to avoid more obvious violations of the &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Interface_segregation_principle&#34;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;It gives me the flexibility to quickly &lt;em&gt;swap one object for another&lt;/em&gt;, as long as the interface adopted is the same&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No matter what language you&amp;rsquo;re working with, make it a point to have an abstract signature of your object before you go ahead with the actual implementation.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusion&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are other good practices that can be kept in mind while doing OOP, such as aiming for object&amp;rsquo;s immutability.
But I believe that by at least keeping in mind the practices listed above, you can write high quality Object Oriented Code that makes sense and that you can be proud of.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further reading:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html&#34;&gt;Why getter and setter methods are evil&lt;/a&gt; - Allen Holub&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yusufaytas.com/achieving-abstraction-in-javascript/&#34;&gt;Achieving Abstraction In JavaScript&lt;/a&gt; - Yosuf Aytas&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html&#34;&gt;Objects should be immutable&lt;/a&gt; - Yegor Bugayenko&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spf13.com/post/is-go-object-oriented/&#34;&gt;Is Go OOP?&lt;/a&gt; - Steve Francia&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/1R0NSpg&#34;&gt;Elegant Objects&lt;/a&gt; [Amazon] - Yegor Bugayenko&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Microservices won’t improve your code quality</title>
      <link>http://www.marcotroisi.com/microservices-wont-improve-your-code-quality/</link>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/microservices-wont-improve-your-code-quality/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;ve read some of my &lt;a href=&#34;http://www.marcotroisi.com/tag/microservices/&#34;&gt;previous posts&lt;/a&gt;, you&amp;rsquo;ll know that I&amp;rsquo;m fairly excited about microservices. No, I do not believe them to be the answer to all of software development problems, but yes, they can be &lt;em&gt;one of&lt;/em&gt; the answers to &lt;em&gt;some of&lt;/em&gt; the problems we face.&lt;/p&gt;

&lt;p&gt;I say that and I mean it. Who doesn&amp;rsquo;t want to be able to rewrite a critical part of an application in two weeks or less? Who doesn&amp;rsquo;t think it&amp;rsquo;s the best thing for a service to handle graciously a failure on the part of one of its components, rather than becoming entirely unavailable?&lt;/p&gt;

&lt;p&gt;Yes, microservices are a great thing.&lt;/p&gt;

&lt;p&gt;But we are professionals, and as such we can&amp;rsquo;t afford going after what&amp;rsquo;s &amp;#8220;cool&amp;#8221; in the industry without keeping track of the big picture.&lt;/p&gt;

&lt;h2 id=&#34;write-great-code-first&#34;&gt;Write great code first&lt;/h2&gt;

&lt;p&gt;Just as knowing how to count doesn&amp;rsquo;t make you a Mathematician, knowing how to write some code doesn&amp;rsquo;t make you a Programmer. I hope I don&amp;rsquo;t sound elitist or arrogant when I say that, but I am convinced that if we don&amp;rsquo;t take ourselves seriously, no one else will.&lt;/p&gt;

&lt;p&gt;Being a programmer means knowing the discipline of programming. It means being aware that every line of code you write today, will have a consequence in the lives of both the end user of your application, and other programmers that will successively work on that same piece of code.&lt;/p&gt;

&lt;p&gt;This is obviously not the right place to list all the things that you should be aware of while writing your code, but suffices to say that there are quite a few of them, and being careless about them is a clear indicator of how (un)seriously is one taking her job.&lt;/p&gt;

&lt;h2 id=&#34;what-you-need-to-know-before-you-start-with-microservices&#34;&gt;What you need to know before you start with microservices&lt;/h2&gt;

&lt;p&gt;Before you even begin to think about doing microservices, you need to get some facts straight:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The monolith is not bad per se&lt;/li&gt;
&lt;li&gt;Microservices don&amp;rsquo;t magically suspend the rules&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s have a closer look at them:&lt;/p&gt;

&lt;h3 id=&#34;the-monolith-is-not-bad-per-se&#34;&gt;The monolith is not bad per se&lt;/h3&gt;

&lt;p&gt;We are being sold this idea that monolithic software is messy, slow and evil. The code? Spaghetti without a doubt. But this is of course only true if you let it. Ideally, in a monolithic application that&amp;rsquo;s been developed following the basic principles of a clean architecture, and possibly using TDD, I see no reason why those bad things should be true.&lt;/p&gt;

&lt;h3 id=&#34;microservices-don-t-magically-suspend-the-rules&#34;&gt;Microservices don&amp;rsquo;t magically suspend the rules.&lt;/h3&gt;

&lt;p&gt;Say you know how to do your job well, and you&amp;rsquo;ve written perfectly clean monolithic application until now. You are told that microservices make the whole thing so much easier, and each component is so small that you don&amp;rsquo;t need to put the same amount of care into it. Is that true? No, it isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;That would be like &lt;em&gt;Pirelli&lt;/em&gt; thinking they don&amp;rsquo;t have to work as hard on their tyres as would a theoretical guy who is in charge of building the entire car by himself. After all a tyre is just a small part of a car, isn&amp;rsquo;t it? I mean, if anything breaks or if you need a different type of tyre, you quickly replace it.&lt;/p&gt;

&lt;p&gt;In the same way, one should feel justified to build the &lt;em&gt;Withdrawing&lt;/em&gt; component of a microservices-based Banking software in the most careless way! After all, if it stops working, if it becomes too slow, or if we simply don&amp;rsquo;t like it anymore, we can quickly rewrite it and replace it.&lt;/p&gt;

&lt;p&gt;I hope you can see that this is just nuts. No one thinks like that, in any industry, and neither should we. Pirelli would have their best engineers designing the safest, most performant tyres possible. They wouldn&amp;rsquo;t want a mistake on their part to compromise a car&amp;rsquo;s reliability. In the same way, each component of our microservices-based application needs to be something we can be proud of, that can potentially run for as long as possible unless a rewrite becomes necessary for reasons beyond our control.&lt;/p&gt;

&lt;p&gt;These days I&amp;rsquo;m hearing some people saying things like &amp;#8220;we keep our microservices so small, that we don&amp;rsquo;t even need to write tests!&amp;#8221; I&amp;rsquo;m confused. How does that even follow? Again, imagine the guy in charge of building brakes for cars, saying &amp;#8220;this is such a small part of the whole car, we don&amp;rsquo;t even need to test it!&amp;#8221; This makes no sense, and it&amp;rsquo;s simply unjustifiable.&lt;/p&gt;

&lt;h2 id=&#34;re-defining-microservices&#34;&gt;(Re)defining microservices&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Microservices are really more about the deployment strategy than anything else&lt;/em&gt;. As &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html&#34;&gt;suggested&lt;/a&gt; by &lt;em&gt;Uncle&lt;/em&gt; Bob Martin, if you build your application following what we know to be a clean architecture, the decision of whether to deploy everything into microservices or not is one that can be easily delayed to a later point. You don&amp;rsquo;t need to start building your software with microservices in mind. What you do need to keep in mind, is that your software will need to be clean and tested, at the very least.&lt;/p&gt;

&lt;p&gt;When you look at microservices this way, they become a lot less scary, and in a sense a lot of the hype around them goes away. Obviously, a microservice architecture remains a fantastic approach that I would highly suggest for a lot of use cases. But it&amp;rsquo;s not, in any way, a different approach to programming. It&amp;rsquo;s the same, clean, high quality code that you have (hopefully) been writing until now, now deployed and perhaps organised differently.&lt;/p&gt;

&lt;p&gt;Now, I am not saying that having a microservice architecture will not affect any of your design decisions. It will. But I am suggesting we don&amp;rsquo;t give it more credit than we should. I am saying that we should design the architecture of our application regardless of whether it will eventually be deployed into small microservices or not. And, by all means, let&amp;rsquo;s not allow the &lt;em&gt;small-ness&lt;/em&gt; of each microservice to suspend the rules of programming. No architectural choice is worth you giving up on being a professional.&lt;/p&gt;

&lt;p&gt;Microservices won&amp;rsquo;t improve your code quality. They won&amp;rsquo;t make it worse either. Really, it&amp;rsquo;s up to you, as it always was, and always will be.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Technical debt is not a unicorn</title>
      <link>http://www.marcotroisi.com/technical-debt-is-not-a-unicorn/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/technical-debt-is-not-a-unicorn/</guid>
      <description>&lt;p&gt;Amongst software engineers, there is this thing called &lt;em&gt;technical debt&lt;/em&gt; that is very often talked about and that tends to have somewhat of an ethereal nature.&lt;/p&gt;

&lt;p&gt;Almost every company will have the technical debt prophet who will try to convince her people that doing what &amp;#8220;feels good&amp;#8221; now is not going to pay off down the line, and that &amp;#8220;future generations&amp;#8221; will have to pay for it. But, almost inevitably, choices will be made that will inescapably lead to some degree of technical debt.&lt;/p&gt;

&lt;p&gt;The list of things that feel good now includes but is not limited to: shipping as fast as possible, making the manager happy, getting back to those hilarious videos on youtube, etc.&lt;/p&gt;

&lt;p&gt;The problem is that sometimes we fail to understand how much of a damage are we actually making with those poor choices being implemented.&lt;/p&gt;

&lt;h2 id=&#34;business-and-codebase-should-grow-together&#34;&gt;Business and codebase should grow together&lt;/h2&gt;

&lt;h3 id=&#34;the-first-stage-of-growth&#34;&gt;The first stage of growth&lt;/h3&gt;

&lt;p&gt;Think of the Business side of your company and its software codebase as two parts of the whole picture that should be growing and maturing together. So, for example, when the company is at its early stages, and the way everything is being run is very simple and lean because there isn&amp;#8217;t much to be run anyway, the software should also be really down to the basics. No unnecessary complexity, no premature optimisation. Keep it simple, keep it &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;clean&lt;/a&gt;. Write the cleanest code you possibly can, rely on a rock-solid, time tested set of tools. Don&amp;#8217;t adventure in something that you &lt;em&gt;think&lt;/em&gt; will be useful as you grow, rather make sure that you make it as easy as possible to transition the software to a different framework, database, architecture (e.g. a &lt;a href=&#34;http://www.marcotroisi.com/micro-services-a-quick-introduction/&#34;&gt;Microservices&lt;/a&gt; architecture).&lt;/p&gt;

&lt;h3 id=&#34;the-second-stage-of-growth&#34;&gt;The second stage of growth&lt;/h3&gt;

&lt;p&gt;As the company begins to gain traction, there will be a time of relatively rapid growth. The company is going from literally zero to hundreds or thousands of people using the particular services they offer. At this time, it will begin to become evident whether good choices were made in the prior stage; it should be very easy to change anything based on a new decision from the managers or, perhaps, from the customer&amp;#8217;s feedback. Changing anything should be a matter of hours, not days. Implementing a new feature should be an absolute pleasure. No important architectural change should be necessary in order for the whole platfom to keep functioning even in the face of thousands of new users being added daily. Of course, things like implementing a new cache layer to ease the pressure on the servers, or adding a new cluster for the database, are okay. But no discussion about changing framework, or adopting a new database should take place. If the framework or database adopted can&amp;#8217;t handle this type of pressure nicely, then someone made a very incompetent choice at the previous level, the one where this type of decisions were made. But ideally, all modern frameworks and databases should be able to manage the amount of traffic that is happening at this particular stage.&lt;/p&gt;

&lt;h3 id=&#34;the-third-stage-of-growth&#34;&gt;The third stage of growth&lt;/h3&gt;

&lt;p&gt;The third stage would be the one of multiplication. At this point, the company is so successful that it may want to launch its services abroad. As the product is already popular enough in its home country, say the US, you&amp;#8217;d expect that on day one of the launch to the next territory, say Europe, you&amp;#8217;d have to handle hundreds of thousands of new users, with support for multiple languages and a whole lot of things that will have to be customised on a single Country basis. This is the time where considerations like, &amp;#8220;should we switch framework&amp;#8221; or &amp;#8220;can our database handle this much&amp;#8221; are more than appropriate. Here more than anywhere else, it will become evident whether everyone did his/her job properly. If good choices were made and everyone acted like a professional at the prior stages, moving from one database to another, adopting a different framework, or switching to a more scalable architecture, should only be a matter of days. But, most importantly, the key people in the team should have a clear path in their mind of what needs to be done in order for that transition to take place. There should be no guessing.&lt;/p&gt;

&lt;h2 id=&#34;technical-debt-is-suicide&#34;&gt;Technical debt is suicide&lt;/h2&gt;

&lt;p&gt;Just like any other debt, technical debt will only lead to bad things. And as it increases, the chances of a company succeeding are going to be greatly diminished. There is an inversely proportional relationship between the two.&lt;/p&gt;

&lt;p&gt;Now imagine the opposite situation, of a company that does it all wrong. It would look something like this: at the first stage of growth, there would be two plausible scenarios. The first, would be that of premature optimisation with unnecessary choices and decisions being made, because of incompetent leaders and programmers who think their little company should have the same scalability that Google has. Days, weeks, are wasted implementing layers of caching and database clusters, and setting up complex development and deployment tools, without even enough people to maintain all this stuff. If anything breaks, the CTO, a team lead or a senior engineer needs to spend a day or two fixing the problem because there aren&amp;#8217;t even enough people to take care of it (you don&amp;#8217;t usually have devops or system people in a small startup). The growth of the company is slowed down, and you&amp;#8217;re lucky if it succeeds at all.&lt;/p&gt;

&lt;p&gt;The second scenario would be that of someone who wants to avoid at any cost the first scenario, and decides that, after all, the only thing that matters is for the company to keep growing as fast as possible. They won&amp;#8217;t waste an hour more on a ticket in order to write tests and to make sure the code is clean. They won&amp;#8217;t make sure it&amp;#8217;s easy at any point in future to switch database or even adopt a different ORM library. The &lt;em&gt;illusion&lt;/em&gt; of this scenario is that it is likely to get the company to the second stage of growth, even if at the cost of a few late nights and weekends spent fixing bugs and an overall unstable platform.&lt;/p&gt;

&lt;p&gt;At the second stage of growth, coming from the second scenario, choices that should have been made at the third stage, like switching to a different database or a change of architecture, will become necessary because the platform can&amp;#8217;t even handle the few thousands of new users that are being added on a periodic basis. What&amp;#8217;s even worse, a rewriting of many parts or the codebase will become inevitable and a lot of time will have to be spent desperately trying to raise the percentage of code covered by some sort of test.&lt;/p&gt;

&lt;p&gt;For the company coming from the first scenario, it won&amp;#8217;t look too different. A lof of technical choices that had been made in the first stage will be shown as wrong for the actual needs of this specific platform, and so again time will have to be spent switching and rewriting.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s hard to imagine a company getting to the third stage of growth under these circumstances, but if it does, it should look similar to what it would have looked like in normal conditions. But, again, it&amp;#8217;s unlikely to get there, and if it does, so much time and money will have been wasted to get here, that it will be hard to justify again any change or rewriting, though this is the only stage where those things would have actually made sense. It&amp;#8217;s also likely that a few key people in the engineering team has been replaced because of their incompetence, adding to everything else the costs of having to introduce new people and mosts importantly new leaders.&lt;/p&gt;

&lt;h2 id=&#34;avoiding-technical-debt&#34;&gt;Avoiding technical debt&lt;/h2&gt;

&lt;p&gt;Technical debt exists, it&amp;#8217;s real and it can be proven, almost touched. It&amp;#8217;s not a myth, and the first step to avoiding it is realising how damaging it can be. Doing things right will not only lead to building a successful platfom serving happy customers. It will also be a lot more fun. It&amp;#8217;s way more enjoyable to work on clean code, to be able to introduce a new feature in a matter of hours and not weeks. It&amp;#8217;s a lot better to spend time solving real problems rather than fixing bugs. And of course, no one wants to work late nights and weekends if it&amp;#8217;s not absolutely necessary.&lt;/p&gt;

&lt;h2 id=&#34;more-resources&#34;&gt;More resources&lt;/h2&gt;

&lt;h3 id=&#34;to-read&#34;&gt;To Read&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;The clean architecture&lt;/a&gt; (Uncle Bob Martin)&lt;/li&gt;
&lt;li&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;#038;camp=1789&amp;#038;creative=390957&amp;#038;creativeASIN=0132350882&amp;#038;linkCode=as2&amp;#038;tag=marctroi-20&amp;#038;linkId=7KDRFWMKHKFMNWAR&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt; &lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;#038;l=as2&amp;#038;o=1&amp;#038;a=0132350882&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;(Uncle Bob Martin)&lt;/li&gt;
&lt;li&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.com/gp/product/1617292397/ref=as_li_tl?ie=UTF8&amp;#038;camp=1789&amp;#038;creative=390957&amp;#038;creativeASIN=1617292397&amp;#038;linkCode=as2&amp;#038;tag=marctroi-20&amp;#038;linkId=CVFNNRQ23ADXVH4O&#34;&gt;Soft Skills: The software developer&amp;#8217;s life manual&lt;/a&gt; &lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;#038;l=as2&amp;#038;o=1&amp;#038;a=1617292397&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;(John Sonmez)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;to-watch&#34;&gt;To Watch&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HhNIttd87xs&#34;&gt;Architecture: the lost years&lt;/a&gt; (Uncle Bob Martin)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=vqEg37e4Mkw&amp;amp;list=PLJb2p0qX8R_r3crCVAxp57dvoqGGjD3yD&#34;&gt;Workflows of refactoring&lt;/a&gt; (Martin Fowler)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>A Question about Microservices</title>
      <link>http://www.marcotroisi.com/questions-about-microservices/</link>
      <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/questions-about-microservices/</guid>
      <description>&lt;p&gt;I received this question about microservices, and I am happy to publish my reply. Perhaps someone else will also find it helpful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello Marco,&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve just stumbled upon your articles about microservices. I&amp;#8217;m really trying to get into it, I find it a really interesting approach when it comes to build web apps. I got bored with all those frameworks claiming MVC etc. What I want to focus on is SOC, so microservices really fits in there. However I didn&amp;#8217;t have time yet to practice what I could have read on that, and there are still things that are pretty obscure to me, maybe you could give me your point of view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My main concern is about information sharing between services. What happens when a microservice is &amp;#8220;linked&amp;#8221; to another one ? If I take your example of WordPress refactoring, you&amp;#8217;re for example stating that there could be a Post and Media Content microservices. But here, the media content microservices isn&amp;#8217;t really standalone as it wouldn&amp;#8217;t make sense to use it without the Post microservice, because Media Content is directly attached to a Post, see what I mean ? It sounds kind of weird to me, but maybe I&amp;#8217;m wrong.&lt;/p&gt;

&lt;p&gt;Also my second point would be about user authentication. How do you persist the state between microservices ? Do you have an example of that ?&lt;/p&gt;

&lt;p&gt;Thanks for the articles, Waiting to hear from you.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Romain&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Dear Romain,&lt;/p&gt;

&lt;p&gt;Thanks for reading my article on microservices, I appreciate it. Like you, I am also sick and tired of big, overbloated frameworks that claim to do everything for you, including making your coffee in the morning. While they may be a good choice in certain situations, I think many times they just add a lot of unnecessary complexity, unnecessary &lt;em&gt;ad hoc&lt;/em&gt; concepts to be learned, and most importantly, unnecessary (potentially buggy) code that you haven&amp;#8217;t written yourself. These days I find myself more inclined towards micro-frameworks, or even simple libraries that do just one thing; an example I love would be &lt;a href=&#34;http://www.gorillatoolkit.org/&#34;&gt;Gorilla&lt;/a&gt;, a Golang set of standalone libraries that take care of most of the functionalities for which we would have traditionally used a framework.&lt;/p&gt;

&lt;p&gt;As to your question, let me see if I can somehow help you here. When you say &amp;#8220;linked&amp;#8221;, I take it that you mean a microservice that&amp;#8217;s &lt;em&gt;usually&lt;/em&gt; (or, meant to be) used in conjunction with one or more other microservices. But that, when you think about it, is nothing strange! In fact, any microservice that would be meant to be only used on its own, would simply be a small monolith. For a microservice to be considered as such, it needs to be part of a &lt;strong&gt;microservices architecture&lt;/strong&gt;, that is to say, a bigger application that does a lot of things, and that uses microservices to do each one of those things.&lt;/p&gt;

&lt;p&gt;But I get where your doubt is coming from. You are thinking about the Media Content example, and it doesn&amp;#8217;t feel to you like a standalone service as it would never be used separately from the Post microservice. I see two main problems in this reasoning.&lt;/p&gt;

&lt;p&gt;Firstly, the idea of standalone-&lt;em&gt;ness&lt;/em&gt; in a microservices architecture is meant to be mostly for the sake of the application&amp;#8217;s solidity; in other words, you ought to think of the Post microservice as a standalone service not because you want to use it as such (in fact, you don&amp;#8217;t! You want to use it together with Media, and maybe other services), but because in the event where the Media microservice should be unavailable (e.g. due to a network problem), you don&amp;#8217;t want the entire application to be altogether down. What you want there, is for the Posts to be still available, even though you might have to gracefully handle the absence of pictures and videos.&lt;/p&gt;

&lt;p&gt;I hope this gives you the right perspective. The idea is that you build a microservice independently, and you test it on its own, so to make sure that it will keep working even when other services are unavailable. Then, you mix it with the other microservices.&lt;/p&gt;

&lt;p&gt;The second problem I see there is that, while I agree that Media will mostly be used in conjunction with the Post microservice, nevertheless you shouldn&amp;#8217;t think of them as &lt;em&gt;only&lt;/em&gt; usable together. If you keep things clean and separated, you will be better off in the future, as you never know what functionalities you are going to need as you move on. Think for example of a service that takes pictures from your Media microservice and send them to your Pinterest account using Pinterest&amp;#8217;s APIs. In this case, you don&amp;#8217;t really need the Post microservice, and it would be just one example of a situation where you need Media but you don&amp;#8217;t need Post. So the real point here is the &lt;em&gt;separation of concerns&lt;/em&gt;. Let each microservice do only one thing, and do it well. Let the Media microservice handle upload, resize, manipulation and what-have-you. Let the Post microservice handle the actual content and things like Markdown to HTML conversion (which could probably be another microservice anyway), and so on.&lt;/p&gt;

&lt;p&gt;Regarding your second question about authentication, I would advice you make use of a layer that will take care of receiving requests from the outside, handle the user authentication, and then route the request to the appropriate microservice (together with &lt;em&gt;at least&lt;/em&gt; a secret token, or something more sophisticated if you will), get the result from the microservice and send it back to user. Have a look at &lt;a href=&#34;https://getkong.org/&#34;&gt;Kong&lt;/a&gt; for a reference and a better idea of what I am talking about (warning: it might be overhead for certain projects, but just so you have an idea).&lt;/p&gt;

&lt;p&gt;Here are more resources for you, so you can go more in depth with these arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2015/08/06/let-the-magic-die.html&#34;&gt;Make the magic go away (Uncle Bob)&lt;/a&gt;, on the notion of not using overbloated frameworks!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1491950358/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1491950358&amp;amp;linkCode=as2&amp;amp;tag=marctroi-20&amp;amp;linkId=J656A6LG3XRMA3J4&#34;&gt;Building Microservices (Sam Newman)&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;#038;l=as2&amp;#038;o=1&amp;#038;a=1491950358&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://microservices.io/&#34;&gt;Microservices.io&lt;/a&gt;, lots of fine articles to give you a better overview of a microservices archicture, the good and the bad&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;Microservices guide (Martin Fowler)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techblog.netflix.com/2015/02/a-microscope-on-microservices.html&#34;&gt;Netflix and Microservices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wish you a lot of fun with microservices and your next project,&lt;/p&gt;

&lt;p&gt;Marco&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you&amp;#8217;d like to send me your questions or suggestions, feel free to &lt;a href=&#34;http://www.marcotroisi.com/contact/&#34;&gt;contact me&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What can we learn from Periscope</title>
      <link>http://www.marcotroisi.com/what-can-we-learn-from-periscope/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/what-can-we-learn-from-periscope/</guid>
      <description>&lt;p&gt;I have been using &lt;a href=&#34;http://www.periscope.tv&#34;&gt;Periscope&lt;/a&gt; for a while now, and I am really enjoying it. If you don&amp;#8217;t know it, Periscope is Twitter&amp;#8217;s new live streaming app, that allows anyone to stream directly from one&amp;#8217;s smartphone, and it will notify you as soon as someone you follow is live-streaming.&lt;/p&gt;

&lt;p&gt;The concept of live streaming is not a new one, but Periscope (alongside with their competitor, &lt;a href=&#34;https://meerkatapp.co/&#34;&gt;Meerkat&lt;/a&gt;) has made it really easy to do so from a mobile device and, most importantly, to create a community of followers around it.&lt;/p&gt;

&lt;p&gt;If you are on Twitter, it makes sense that you&amp;#8217;d want to give Periscope a shot. What makes it different from YouTube is of course the live element, what makes it different from, say, &lt;a href=&#34;https://plus.google.com/hangouts/onair&#34;&gt;Google Hangouts On Air&lt;/a&gt;, is the sense of &lt;em&gt;impromptu-ness&lt;/em&gt; and familiarity that it creates, as you&amp;#8217;re literally speaking from your phone, but also the fact that you already have a community of followers that will be notified when you start streaming, so there is no need to plan it in advance.&lt;/p&gt;

&lt;p&gt;Personally, I have been using Periscope as a watcher, rather than a streamer, in order to follow some of my favourite people that I already follow on other social media channels.&lt;/p&gt;

&lt;h2 id=&#34;what-8217-s-great-about-periscope&#34;&gt;What&amp;#8217;s great about Periscope&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;alignright wp-image-446 size-full&#34; src=&#34;http://www.marcotroisi.com/wp-content/uploads/2015/09/periscope.png&#34; alt=&#34;periscope&#34; width=&#34;228&#34; height=&#34;228&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you use Periscope, two things will become obvious to you after a little while:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The app is beautifully designed. It&amp;#8217;s elegant yet simple to use.&lt;/li&gt;
&lt;li&gt;There is still a lot that can be improved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I find this great, and I think there is something engineers, product managers and other people involved in building apps and online services can learn. It&amp;#8217;s something that has to do with focus, with avoiding being a perfectionist and with not wasting time. Here&amp;#8217;s what I think are the lesson Periscope&amp;#8217;s creators can teach us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Core business&lt;/strong&gt;. Spend some time understanding what exactly your core business is about, and focus mainly on that until you know it&amp;#8217;s absolutely awesome. In Periscope&amp;#8217;s case the core business is &lt;em&gt;live streaming&lt;/em&gt;. There is much more they can do to make the app better and better, like a better player for re-watching videos, a landscape mode, perhaps even a web/desktop version of the app. But, the things that are there, are absolutely great. The app does only a few things, but it works so well! It&amp;#8217;s smooth, it&amp;#8217;s elegant, it&amp;#8217;s simple. In other words, it&amp;#8217;s addictive. Just like Twitter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Perfectionism is bad&lt;/strong&gt;. Saying that you want your app to be great is one thing. Trying to make it perfect is unrealistic. Once you&amp;#8217;ve found your core business, make sure you deliver enough functionalities so that users can actually understand, and enjoy, the core business. When you use Periscope, it won&amp;#8217;t take you long before realising that the app is all about live streaming and creating a community around live videos. That&amp;#8217;s it. Like I said, there are so many functionalities they could add, but trying to have them all from the start, would have delayed indefinitely their launch, and would have probably confused people on what the app is about. Think of Google and their years-long beta version of Gmail: they kept it in beta knowing that they wanted to keep improving it. Yet, the core functionalities where there, and, frankly, they were great from the beginning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&amp;#8217;t waste time&lt;/strong&gt;. In the programming world, we talk about &lt;em&gt;premature optimisation&lt;/em&gt; as the unfortunate situation where programmers spend too much time thinking about how to make sure the app is ready for a lot of functionalities that, from a business point of view, may not even have been decided yet. The solution to that, is to develop software that has a solid foundation, and that is flexible enough that you can keep improving it and adding to it without fear of breaking something in the process. Periscope seems to have done this. Since I have been using it, I have experienced no crashes. The app works really well and it seems to me to be pretty stable. Yet, as I have already said, there are things they could add to make it better. But what is there is enough to make people want to use it, and the foundation has been laid for adding new features that will make it even better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In conclusion, Periscope is a great app, but what is making it a huge success is how they have handled the development phase. If you like Meerkat or other competitor apps, that&amp;#8217;s great, but the reason why I didn&amp;#8217;t like it, was that I found it overly complex and it just didn&amp;#8217;t feel as smooth and simple to use. It lacks focus. On the flip side, Periscope developers seem to have gotten it right.&lt;/p&gt;

&lt;p&gt;This is of course just my point of view, and I would love to hear yours! &lt;a href=&#34;https://twitter.com/MarcoTroisi/status/639770687045894145&#34;&gt;Let me know&lt;/a&gt; what you think.&lt;/p&gt;

&lt;h2 id=&#34;more-resources&#34;&gt;More resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://michaelhyatt.com/what-i-love-about-periscope.html&#34;&gt;What I love about Periscope&lt;/a&gt; (Michael Hyatt)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/B014IP8RU2/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B014IP8RU2&amp;amp;linkCode=as2&amp;amp;tag=marctroi-20&amp;amp;linkId=CWTOFMMUFKNYIKLR&#34;&gt;Periscope Your Biz: Live Video Broadcasting for Profits&lt;/a&gt; &lt;img style=&#34;border: none !important; margin: 0px !important;&#34; src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;l=as2&amp;o=1&amp;a=B014IP8RU2&#34; alt=&#34;&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; /&gt;(Book &amp;#8211; Amazon)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/B012H76NMC/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B012H76NMC&amp;amp;linkCode=as2&amp;amp;tag=marctroi-20&amp;amp;linkId=Z4TNTOACIIF5P66N&#34;&gt;Leveraging Twitter&amp;#8217;s Periscope: Join The Community, Build Your Business, and Have Fun!&lt;/a&gt; &lt;img style=&#34;border: none !important; margin: 0px !important;&#34; src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=marctroi-20&amp;l=as2&amp;o=1&amp;a=B012H76NMC&#34; alt=&#34;&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; /&gt;(Book &amp;#8211; Amazon)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Apple and the battle for privacy</title>
      <link>http://www.marcotroisi.com/apple-and-the-battle-for-privacy/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/apple-and-the-battle-for-privacy/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Apple is in no position for attacking other companies over how they deal with their users privacy and security. There is nothing in their policies that makes us think they care about us more than other companies do.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Only a few weeks ago, Apple&amp;#8217;s CEO Tim Cook delivered a &lt;a href=&#34;http://techcrunch.com/2015/06/02/apples-tim-cook-delivers-blistering-speech-on-encryption-privacy/#.uvoewi:m2qz&#34;&gt;speech&lt;/a&gt; on privacy, security and how Apple is so much better at these things.&lt;/p&gt;

&lt;p&gt;Now, someone would say I am an anti-Apple guy, although that&amp;#8217;s demonstrably false, if for nothing else, because I have owned and worked with several Apple devices during the course of the past few years. I do not always enjoy how they market their products, the way they make you feel like you absolutely need something you actually don&amp;#8217;t. &lt;a href=&#34;http://www.apple.com/uk/osx/&#34;&gt;Mac OS&lt;/a&gt; is probably my favourite OS, but it is extremely expensive to buy, and in my opinion, unless you are a professional, you really don&amp;#8217;t need anything more than a nice laptop with &lt;a href=&#34;http://www.ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; on it. But that&amp;#8217;s besides the point.&lt;/p&gt;

&lt;p&gt;It made me feel quite uncomfortable to listen to Cook&amp;#8217;s words on how we can all trust Apple with our data and our messages. Now, don&amp;#8217;t get me wrong, it&amp;#8217;s amazing that a CEO of a major tech company would stand up in defense of his customers&amp;#8217; data, stating how unacceptable it is for any other company not to act this way. But then it made me think that, great words aside, there was nothing there that would justify him attacking other companies (mostly, Google), and positioning himself as the new champion for the defense of people&amp;#8217;s security and privacy.&lt;/p&gt;

&lt;p&gt;There are actually a few reasons why Apple &lt;strong&gt;is not&lt;/strong&gt; in the position of becoming the new advocate of privacy and security:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Apple has been shown vulnerable to attacks a few times already&lt;/strong&gt;. Just think of the not-too-long-ago leaked &lt;a href=&#34;http://www.ibtimes.com/icloud-nude-leaks-26-celebrities-affected-nude-photo-scandal-1692540&#34;&gt;celebrity pictures&lt;/a&gt; from iCloud. Of course, these things happen, not only to Apple products, and most of the times it&amp;#8217;s just people&amp;#8217;s fault for not creating stronger passwords/enabling &lt;a href=&#34;https://en.wikipedia.org/wiki/Two-factor_authentication&#34;&gt;two-factor authentication&lt;/a&gt;. But still, we can&amp;#8217;t recall anything like that happening with Gmail, or Google+ Photos in recent times. And even it had, it would only show they are all susceptible to such attacks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They are a very closed company&lt;/strong&gt; From my point of view, this is a major one. If the CEO of &lt;a href=&#34;http://www.redhat.com&#34;&gt;Red Hat&lt;/a&gt; were to give a similar speech, I would have applauded him. Why? Because Red Hat (like some other companies out there) adheres to a strict policy of transparency, which is very clear first and foremost by the fact that they open source &lt;strong&gt;all of their products&lt;/strong&gt;. This means that they could never put themselves in Cook&amp;#8217;s position without having thousands of people going to actually check their code to verify the truth of their claims. But this is simply impossible with Apple. A more closed, walled-garden type of company I can&amp;#8217;t think of. A while ago my wife and I had a really bad experience with trying to move all our iCloud photos somewhere else, so that we could access them from our non-Apple devices as well. We struggled and struggled, and took us hours to move everything. The reality is, there is no easy way to opt-out from Apple, whereas it&amp;#8217;s really easy to move away from most of, say, Google&amp;#8217;s products. If they really cared about my data, they should at least give me the ability to easily export it somewhere else anytime I want. It is my data, after all.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is not true that if something is for free, then you must be the real product&lt;/strong&gt;. Derek Powazek wrote a &lt;a href=&#34;http://powazek.com/posts/3229&#34;&gt;great piece&lt;/a&gt; on this. Companies like Apple like to charge you for everything. And they want to make you believe that because you are paying &lt;em&gt;a lot&lt;/em&gt; of money, you will have a better service and your data won&amp;#8217;t be used for other purposes, like, showing you ads based on your searches. But this is demonstrably false. First of all, there is no direct connection between you paying for a service and how your data will be used. For all we know, Apple (and others) could be doing &lt;a href=&#34;http://advertising.apple.com/&#34;&gt;the same thing&lt;/a&gt; with your data even though you paid for their products. Besides, I can give you plenty of examples of products for which I have paid money, only to be treated rubbish by the companies who made them. On the other hand, some of the free services that I use, have made me incredibly happy. All this is saying, is that &lt;em&gt;there is no correlation between how much you pay, and how much they care about you&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Like I said at the beginning, I am not an anti-Apple person, and I didn&amp;#8217;t write this piece to attack Apple. Rather, I wanted to put things back into the right perspective. I do not believe companies like Google, Microsoft or Amazon do any better than Apple in terms of privacy and security. Which doesn&amp;#8217;t mean what they do is bad. All of these companies adopt (or are in the process to adopt) first-class encryption techniques, and one would want to argue that if there is anyone with enough resources to actually keep your data safe, then it has to be these companies, including Apple. Besides, privacy is a highly regulated matter (especially here in &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_Protection_Directive&#34;&gt;Europe&lt;/a&gt;), and so there is no way they can use your data to do what they want, unless you explicitly authorise them.&lt;/p&gt;

&lt;p&gt;But, it would be arrogant of one of them to stand up as the messiah of privacy and security, especially if that means attacking other companies. If they want us to keep trusting them with our data, they need to keep doing the right thing. They should ask us only for informations that are strictly necessary; they should use world class encryption and spare no resource in order to keep everything safe; they should use all their influence when governments try to change laws and make it acceptable for them to have a look at my holidays pictures.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Cover photo from Flickr.&lt;/small&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Ethics of Code Reviews</title>
      <link>http://www.marcotroisi.com/the-ethics-of-code-reviews/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/the-ethics-of-code-reviews/</guid>
      <description>&lt;p&gt;Code Reviewing is one of the greatest tools we have as software developers, to help us improve the quality of our code. It can be incredibly beneficial, but it can also be a source of pain and overall, a waste of time instead of a time-saver.&lt;/p&gt;

&lt;p&gt;Like with many things in life, knowing &lt;em&gt;why&lt;/em&gt; we do something, can be a good way to do that thing at its best and not to abuse it. Let&amp;#8217;s begin then to unpack what a code review &lt;strong&gt;is not&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is not your nice, daily half an hour of shooting at your team mates and pointing fingers at their mistakes. If you do code reviews because you find pleasure in finding other people&amp;#8217;s code mistakes or lack of use of best practices, then you shouldn&amp;#8217;t be doing code reviews in the first place.&lt;/li&gt;
&lt;li&gt;It is not a place for &lt;em&gt;teaching&lt;/em&gt;. If you have best practices that you think your team mates should know and use, then there should be a time, prior to starting your project if at all possible, where such best practices and guidelines are established, accepted and understood.&lt;/li&gt;
&lt;li&gt;It is not where discussions should occur. Never mind long and opinionated ones! This is where comments should be kept short and to the point. No repartee, no attempts to justify/defend yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What, then, is code reviewing for? I have outlined &lt;strong&gt;4 points&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It&amp;#8217;s a way of &lt;strong&gt;sharing responsibilities&lt;/strong&gt;. When we are code reviewing, we are &lt;em&gt;&amp;#8220;carrying the weight together&amp;#8221;&lt;/em&gt;, so to speak. We are quitting the old &amp;#8220;I don&amp;#8217;t care, it&amp;#8217;s not my code&amp;#8221; mentality that many of us tend to have, in favour of a &amp;#8220;we&amp;#8217;re in this together&amp;#8221; attitude.&lt;/li&gt;
&lt;li&gt;It is a great way to &lt;strong&gt;learn from each other&lt;/strong&gt;. This might, at first sight, seem to be in contrast with the second point of the previous list, but stay with me here: I have learnt &lt;em&gt;so much more&lt;/em&gt; in my career through friendly, non-aggressive opinions and suggestions from my colleagues, than I have from those forceful, unfriendly and aggressive comments from those who thought they knew better than anyone else (or than me, at least). As a matter of fact, not only have I not learnt anything substantial from them, but I have actually &lt;em&gt;hated them&lt;/em&gt; (the comments, not the people!). No matter how good you are, people deserve your respect, and even if they have less experience than you, you were once like them.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s where some &lt;strong&gt;bugs and blatant errors are found&lt;/strong&gt;. At the end of the day, this is the real point of doing code reviews. When you do one, focus on finding errors and bugs that whoever wrote the code may have missed, and suggest quick way to fix them. Sometimes you&amp;#8217;ll even find the same error occurring more than once. Resist the temptation to write witty comments like &lt;em&gt;&amp;#8220;I can&amp;#8217;t believe you&amp;#8217;re doing this again&amp;#8221;&lt;/em&gt;, or &lt;em&gt;&amp;#8220;stop doing this for heaven&amp;#8217;s sake!!!!!!&amp;#8221;&lt;/em&gt;. Be professional, and if you think there is something that needs to be discussed, do it personally, in a friendly and not humiliating fashion.&lt;/li&gt;
&lt;li&gt;It &lt;em&gt;may&lt;/em&gt; be a way of &lt;strong&gt;improving the code quality&lt;/strong&gt;. As outlined before, best practices should have been priorly discussed, but if you find some piece of code that you reasonably think could be made more efficient, suggest it nicely. A more facultative &lt;em&gt;&amp;#8220;Maybe use &lt;code&gt;function2()&lt;/code&gt;, it would run faster&amp;#8221;&lt;/em&gt; is better than a mandatory &lt;em&gt;&amp;#8220;replace &lt;code&gt;function1()&lt;/code&gt; with &lt;code&gt;function2()&lt;/code&gt;&amp;#8220;&lt;/em&gt; kind of thing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the end of the day, what needs to be remembered is that your collaborators/colleagues/team-mates are professionals like you, regardless of the individual amount of experience. But, ultimately and more importantly, they are human beings! And human beings work better, produce more and tend to be happier in an environment where they are understood, appreciated and respected. And code reviewing can be an incredibly powerful helper in this, if used wisely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: what are your rules and what has been your experience with code reviewing? Share your thoughts on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=http://www.marcotroisi.com/the-ethics-of-code-reviews/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http://www.marcotroisi.com/the-ethics-of-code-reviews/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=http://goo.gl/fDGwIC&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hailo and their “Journey into Microservices”</title>
      <link>http://www.marcotroisi.com/hailo-journey-into-microservices/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/hailo-journey-into-microservices/</guid>
      <description>&lt;p&gt;A while ago, while looking for experiences of companies actually transitioning into a Microservice architecture, I stumbled upon this nicely written, real-world series of articles from &lt;a href=&#34;https://twitter.com/mattheath&#34;&gt;Matt Heath&lt;/a&gt;, published on the &lt;a href=&#34;http://www.hailoapp.com&#34;&gt;Hailo&lt;/a&gt; tech blog. The articles talk about their moving from a mostly-PHP, monolithic architecture, towards one based on Microservices.&lt;/p&gt;

&lt;p&gt;It is very interesting to read about the challenges of a company that started that everyone else, and then had to face the inevitable problems of scalability and code maintainability. It is also stimulating to see how they answered the questions almost everyone asks when trying to move into a Microservices architecture.&lt;/p&gt;

&lt;p&gt;If you are interested, read the articles, starting from the first one: &lt;a href=&#34;https://sudo.hailoapp.com/services/2015/03/09/journey-into-a-microservice-world-part-1/&#34;&gt;A Journey into Microservices&lt;/a&gt;, and then go ahead with &lt;a href=&#34;https://sudo.hailoapp.com/services/2015/03/09/journey-into-a-microservice-world-part-2/&#34;&gt;part two&lt;/a&gt; and &lt;a href=&#34;https://sudo.hailoapp.com/services/2015/03/09/journey-into-a-microservice-world-part-3/&#34;&gt;part three&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: have you worked on a transition to a microservice architecture? What has your experience been? Share your thoughts on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=http://www.marcotroisi.com/hailo-journey-into-microservices/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http://www.marcotroisi.com/hailo-journey-into-microservices/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=http://goo.gl/MB66xW&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Featured photo from the Hailo website&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Composition over Inheritance (what it is, why use it)</title>
      <link>http://www.marcotroisi.com/composition-over-inheritance/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/composition-over-inheritance/</guid>
      <description>&lt;p&gt;In today&amp;#8217;s article, I would like to talk about something which I see that, sometimes, developers aren&amp;#8217;t too familiar with. Most of us know what the traditional concept of &lt;strong&gt;inheritance&lt;/strong&gt; is: a child class extends a parent class. And, obviously, multiple children classes can extend the same parent class.&lt;/p&gt;

&lt;p&gt;What some developers don&amp;#8217;t seem to be always aware of (or, perhaps, they just aren&amp;#8217;t entirely sure how to use it), is the idea of &lt;strong&gt;composition&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-composition&#34;&gt;What is Composition&lt;/h2&gt;

&lt;p&gt;Composition can be explained by a child class &amp;#8220;incorporating&amp;#8221; one or more classes that it intends to extend. In other words, you are declaring inside your class, what other class&amp;#8217; methods do you want to be able to use, without having to strongly tie up your children class to its parent(s).&lt;/p&gt;

&lt;h3 id=&#34;has-a-vs-is-a&#34;&gt;&lt;em&gt;Has-a&lt;/em&gt; VS &lt;em&gt;Is-a&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;A good way to look at Composition is to think of a class that &lt;em&gt;HAS-A&lt;/em&gt; relationship with another class, rather &lt;em&gt;IS-A&lt;/em&gt; &amp;#8220;son&amp;#8221; of that class. In this sense, when you use Composition, the class has an &amp;#8220;identity&amp;#8221; of its own, and it&amp;#8217;s not to be seen as being &amp;#8220;only&amp;#8221; a son of that other class which it extends.&lt;/p&gt;

&lt;h2 id=&#34;the-benefits-of-composition&#34;&gt;The Benefits of Composition&lt;/h2&gt;

&lt;p&gt;While I am not advocating for the complete elimination of traditional inheritance, there are benefits of using Composition that I would like to highlight. And, the way I see it, it is possible that once we realise the power of Composition over Inheritance, we may actually end up using Inheritance less and less. Here are the reasons why Composition is a good pattern:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: it is not by chance that I am giving this one the first position in my list. With Inheritance, as mentioned, you tie your Class up to another one, and you define even before starting to design your class, who is going to extend (be a child of) what. But, what happens if you wanted to only use &lt;em&gt;some&lt;/em&gt; of the methods that your parent has? Or, on the opposite side, what if you had 5 children of which only 2 needed a couple of additional methods? These things would not have been a problem with Composition. But the truth is that &lt;strong&gt;Inheritance is often not flexible enough&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extension of Multiple Classes&lt;/strong&gt;: who says you should only extend one Class? Why couldn&amp;#8217;t &lt;code&gt;Corolla&lt;/code&gt; be a son of &lt;code&gt;Car&lt;/code&gt; but also of &lt;code&gt;Toyota&lt;/code&gt; at the same time? That obviously makes sense, but it&amp;#8217;s normally not possible in traditional programming languages. &lt;a href=&#34;http://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces_in_object-oriented_languages&#34;&gt;Interfaces&lt;/a&gt; can give us some help here, but they &lt;em&gt;don&amp;#8217;t&lt;/em&gt; actually implement the methods we need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid duplicates&lt;/strong&gt;: Like in the previous example, if we were to use Interfaces for our &lt;code&gt;Corolla&lt;/code&gt; Class, we would end up having to write some of our methods for our &lt;code&gt;Yaris&lt;/code&gt; or &lt;code&gt;Sedan&lt;/code&gt; Classes. That&amp;#8217;s not cool. Duplicating code is not a good idea.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are other benefits to using Composition, but those are the ones I feel are the most worthy of being highlighted here.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-use-composition-in-insert-programming-language-here&#34;&gt;How do I use Composition in &lt;em&gt;[insert programming language here]&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Composition is available out of the box in &lt;a href=&#34;http://en.wikipedia.org/wiki/Trait_(computer_programming)#Supported_languages&#34;&gt;many of the mainstream languages&lt;/a&gt;. It can be implemented in the form of a &lt;em&gt;Trait&lt;/em&gt; in PHP, Python, Scala and others; It&amp;#8217;s called a &lt;em&gt;Module&lt;/em&gt; in Ruby, and a &lt;em&gt;Role&lt;/em&gt; in Perl. Javascript, as per usual, has &lt;a href=&#34;http://rjzaworski.com/2013/03/composition-in-javascript&#34;&gt;unique ways to implement Composition&lt;/a&gt;, but it&amp;#8217;s there. Finally, it&amp;#8217;s interesting to note that Go doesn&amp;#8217;t even consider Inheritance as an option; Composition is the only game in town, and it&amp;#8217;s called &lt;a href=&#34;http://golang.org/doc/effective_go.html#embedding&#34;&gt;Embedding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: what are your thoughts on Composition over Inheritance? Where is it best to use one over the other? Share your ideas on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=http://www.marcotroisi.com/composition-over-inheritance/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http://www.marcotroisi.com/composition-over-inheritance/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=goo.gl/AU3t8k&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;more-to-read-on-composition-over-inheritance&#34;&gt;More to read on Composition over Inheritance&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.clean-code-developer.com/Favor-Composition-over-Inheritance.ashx&#34;&gt;Clean Code Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Composition_over_inheritance&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codingdelight.com/2014/01/16/favor-composition-over-inheritance-part-1/&#34;&gt;Coding Delight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>An example of a Microservice</title>
      <link>http://www.marcotroisi.com/an-example-of-a-microservice/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.marcotroisi.com/an-example-of-a-microservice/</guid>
      <description>&lt;p&gt;After writing on &lt;a href=&#34;http://www.marcotroisi.com/micro-services-a-quick-introduction/&#34;&gt;Microservices&lt;/a&gt;, I received a few feedbacks from people who found the topic fascinating but struggled to see how to effectively apply it in reality. So I decided to develop a little microservice, to use as a practical example. &lt;/p&gt;

&lt;h2 id=&#34;introducing-microtranslator&#34;&gt;Introducing MicroTranslator&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/marcotroisi/microtranslator&#34;&gt;MicroTranslator&lt;/a&gt;&lt;/strong&gt; is a microservice that I have built, which is supposed to handle locale and translations in an application. Its tech stack is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP &amp;gt;= 5.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fatfreeframework.com&#34;&gt;Fat Free framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mossphp/moss-locale&#34;&gt;Moss Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del datetime=&#34;2015-07-20T07:04:33+00:00&#34;&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; at the time of this writing (14 Apr &amp;#8217;15) I am still working on MicroTranslator. It will be production-ready (documentation included) in a few days. Sorry about that!&lt;/em&gt;&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&#34;it-comes-with-rest-api&#34;&gt;It comes with REST API&lt;/h2&gt;

&lt;p&gt;MicroTranslator provides simple-to-use REST API. For this reason, you need to know little to no PHP to use it. Simply fire up an instance of PHP on whatever machine you like, and then use the APIs to get the translations on the other Microservices that compose your application.&lt;/p&gt;

&lt;p&gt;Now this is important, in my opinion. It means that you can quickly begin working on your application without having to focus on a tedious task such as handling translations, but also that, at any point in time, you can completely get rid of it and rewrite it with, perhaps, a faster language. Or you can simply upgrade your hardware and keep relying on it.&lt;/p&gt;

&lt;h2 id=&#34;8220-i-could-have-done-this-myself-8221&#34;&gt;&amp;#8220;I could have done this myself&amp;#8221;&lt;/h2&gt;

&lt;p&gt;You may think now, &amp;#8220;why should I use your stuff when I can write my own translation manager, using the tools that I like the most?&amp;#8221; The simple answer here is &amp;#8220;You shouldn&amp;#8217;t (use my translation manager)!&amp;#8221;&lt;/p&gt;

&lt;p&gt;But I would also like to point out that, unless translations represent the core of your application, there is no reason why you would want to waste your time rewriting a library that does the same thing. But even if you do, what you should be avoiding is to tie it all up with the rest of your application. Using a Microservices architecture will allow you to &lt;em&gt;replace&lt;/em&gt; parts of your application quickly and seamlessly. And, it will give you the power of choosing the right tools, framework, database, etc for the task.&lt;/p&gt;

&lt;h2 id=&#34;point-by-point&#34;&gt;Point by point&lt;/h2&gt;

&lt;p&gt;Like I said, one of the reasons why I worked on MicroTranslator is because I wanted to create a real-life example out of my previous article on &lt;em&gt;what is a Microservice&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s have a look at the points I outlined back then:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;It is a Stand-alone service/application.&lt;/strong&gt;: Yes, MicroTranslator is stand-alone. It doesn&amp;#8217;t need, and actually, it doesn&amp;#8217;t want, to be included into your PHP application. You can connect to it, get and send to it all the data that you need, but you will not find MicroTranslator-specific code in your application. Just generic REST API calls.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is quick to (re)write.&lt;/strong&gt;: Absolutely! I wrote MicroTranslator in a weekend plus a few other free hours during the week. You can totally rewrite it in a week or less as soon as you feel like it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It focuses on one task&lt;/strong&gt;: It only cares about your translations. It doesn&amp;#8217;t even want to know how you use them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is Language-agnostic.&lt;/strong&gt;: Well, MicroTranslator is clearly written in PHP, but you can use its APIs from any application, regardless of the language/framework/tools you are using.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It is aware of failures&lt;/strong&gt;. This clearly depends on the rest of the application. But, for example, you can cache the translations that you get from MicroTranslator, so that, should it be unreachable at a certain point in time, you can still handle the situation graciously. One thing is sure: if MicroTranslator goes down, it won&amp;#8217;t &lt;em&gt;directly&lt;/em&gt; affect your main application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;in-practice-it-8217-s-not-that-difficult&#34;&gt;In practice, it&amp;#8217;s not that difficult&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s amazing how simple things can look like when we see them in real-life examples. In fact, despite the buzzword-mania and all the hype around Microservices, something that we often fail to understand is how simple they are. Building a Microservice is as simple as a few days of work. Building an entire application based on a Microservices Architecture is as simple as being able to separate everything into small services/applications that are only concerned about one little thing, and they do that &lt;em&gt;very well&lt;/em&gt;. This is, by the way, also one the keys of greater &lt;a href=&#34;http://www.marcotroisi.com/productive-programmer-5-tips/&#34;&gt;productivity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Question: have you already tried to build a Microservice, or even an entire application based on a Microservices architecture? I would love to have a look and learn from you as well. Share your work on &lt;a href=&#34;http://www.facebook.com/sharer/sharer.php?u=http://www.marcotroisi.com/an-example-of-a-microservice/&#34;&gt;Facebook&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http://www.marcotroisi.com/an-example-of-a-microservice/&amp;amp;source=tweetbutton&amp;amp;text=%3F&amp;amp;url=http://goo.gl/KdOum9&amp;amp;via=marcotroisi&#34;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>